// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgChat.proto

#ifndef PROTOBUF_MsgChat_2eproto__INCLUDED
#define PROTOBUF_MsgChat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MsgPB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MsgChat_2eproto();
void protobuf_AssignDesc_MsgChat_2eproto();
void protobuf_ShutdownFile_MsgChat_2eproto();

class Msg_Chat_C2S;

enum CHANNEL {
  WORLD = 1,
  ROOM = 2,
  FRIEND = 3
};
bool CHANNEL_IsValid(int value);
const CHANNEL CHANNEL_MIN = WORLD;
const CHANNEL CHANNEL_MAX = FRIEND;
const int CHANNEL_ARRAYSIZE = CHANNEL_MAX + 1;

const ::google::protobuf::EnumDescriptor* CHANNEL_descriptor();
inline const ::std::string& CHANNEL_Name(CHANNEL value) {
  return ::google::protobuf::internal::NameOfEnum(
    CHANNEL_descriptor(), value);
}
inline bool CHANNEL_Parse(
    const ::std::string& name, CHANNEL* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CHANNEL>(
    CHANNEL_descriptor(), name, value);
}
// ===================================================================

class Msg_Chat_C2S : public ::google::protobuf::Message {
 public:
  Msg_Chat_C2S();
  virtual ~Msg_Chat_C2S();

  Msg_Chat_C2S(const Msg_Chat_C2S& from);

  inline Msg_Chat_C2S& operator=(const Msg_Chat_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_Chat_C2S& default_instance();

  void Swap(Msg_Chat_C2S* other);

  // implements Message ----------------------------------------------

  Msg_Chat_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_Chat_C2S& from);
  void MergeFrom(const Msg_Chat_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 MsgID = 1 [default = 3];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);

  // required .MsgPB.CHANNEL channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::MsgPB::CHANNEL channel() const;
  inline void set_channel(::MsgPB::CHANNEL value);

  // optional int32 receiver = 3;
  inline bool has_receiver() const;
  inline void clear_receiver();
  static const int kReceiverFieldNumber = 3;
  inline ::google::protobuf::int32 receiver() const;
  inline void set_receiver(::google::protobuf::int32 value);

  // required string message = 4;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 4;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:MsgPB.Msg_Chat_C2S)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_receiver();
  inline void clear_has_receiver();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 msgid_;
  int channel_;
  ::std::string* message_;
  ::google::protobuf::int32 receiver_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_MsgChat_2eproto();
  friend void protobuf_AssignDesc_MsgChat_2eproto();
  friend void protobuf_ShutdownFile_MsgChat_2eproto();

  void InitAsDefaultInstance();
  static Msg_Chat_C2S* default_instance_;
};
// ===================================================================


// ===================================================================

// Msg_Chat_C2S

// optional int32 MsgID = 1 [default = 3];
inline bool Msg_Chat_C2S::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_Chat_C2S::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_Chat_C2S::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_Chat_C2S::clear_msgid() {
  msgid_ = 3;
  clear_has_msgid();
}
inline ::google::protobuf::int32 Msg_Chat_C2S::msgid() const {
  return msgid_;
}
inline void Msg_Chat_C2S::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
}

// required .MsgPB.CHANNEL channel = 2;
inline bool Msg_Chat_C2S::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_Chat_C2S::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_Chat_C2S::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_Chat_C2S::clear_channel() {
  channel_ = 1;
  clear_has_channel();
}
inline ::MsgPB::CHANNEL Msg_Chat_C2S::channel() const {
  return static_cast< ::MsgPB::CHANNEL >(channel_);
}
inline void Msg_Chat_C2S::set_channel(::MsgPB::CHANNEL value) {
  assert(::MsgPB::CHANNEL_IsValid(value));
  set_has_channel();
  channel_ = value;
}

// optional int32 receiver = 3;
inline bool Msg_Chat_C2S::has_receiver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_Chat_C2S::set_has_receiver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_Chat_C2S::clear_has_receiver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_Chat_C2S::clear_receiver() {
  receiver_ = 0;
  clear_has_receiver();
}
inline ::google::protobuf::int32 Msg_Chat_C2S::receiver() const {
  return receiver_;
}
inline void Msg_Chat_C2S::set_receiver(::google::protobuf::int32 value) {
  set_has_receiver();
  receiver_ = value;
}

// required string message = 4;
inline bool Msg_Chat_C2S::has_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Msg_Chat_C2S::set_has_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Msg_Chat_C2S::clear_has_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Msg_Chat_C2S::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Msg_Chat_C2S::message() const {
  return *message_;
}
inline void Msg_Chat_C2S::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Msg_Chat_C2S::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Msg_Chat_C2S::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_Chat_C2S::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* Msg_Chat_C2S::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_Chat_C2S::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MsgPB

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgPB::CHANNEL>() {
  return ::MsgPB::CHANNEL_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MsgChat_2eproto__INCLUDED
