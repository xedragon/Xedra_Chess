// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Msg_Login_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_Login_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_Login_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_Login_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_WorldChat_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_WorldChat_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_WorldChat_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_WorldChat_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_RoomChat_C2R_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_RoomChat_C2R_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_RoomChat_R2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_RoomChat_R2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_PrivateChat_C2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_PrivateChat_C2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_RoomOperate_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_RoomOperate_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_RoomOperate_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_RoomOperate_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_StartBattle_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_StartBattle_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_StartBattle_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_StartBattle_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_OriginHandCards_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_OriginHandCards_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_GameUpdate_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_GameUpdate_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_GameUpdate_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_GameUpdate_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_Surrender_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_Surrender_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_Gameover_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_Gameover_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_RoomList_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_RoomList_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_AccountMsg_C2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_AccountMsg_C2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_AccountMsg_S2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_AccountMsg_S2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* protoaccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  protoaccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* protocard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  protocard_reflection_ = NULL;
const ::google::protobuf::Descriptor* protoRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  protoRoom_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GamePattern_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CardAttribute_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RoomOperateType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Msg_2eproto() {
  protobuf_AddDesc_Msg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Msg.proto");
  GOOGLE_CHECK(file != NULL);
  Msg_Login_C2S_descriptor_ = file->message_type(0);
  static const int Msg_Login_C2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Login_C2S, conmethod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Login_C2S, szname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Login_C2S, szpassword_),
  };
  Msg_Login_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_Login_C2S_descriptor_,
      Msg_Login_C2S::default_instance_,
      Msg_Login_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Login_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Login_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_Login_C2S));
  Msg_Login_S2C_descriptor_ = file->message_type(1);
  static const int Msg_Login_S2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Login_S2C, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Login_S2C, consuccess_),
  };
  Msg_Login_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_Login_S2C_descriptor_,
      Msg_Login_S2C::default_instance_,
      Msg_Login_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Login_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Login_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_Login_S2C));
  Msg_WorldChat_C2S_descriptor_ = file->message_type(2);
  static const int Msg_WorldChat_C2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_WorldChat_C2S, szname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_WorldChat_C2S, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_WorldChat_C2S, sztext_),
  };
  Msg_WorldChat_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_WorldChat_C2S_descriptor_,
      Msg_WorldChat_C2S::default_instance_,
      Msg_WorldChat_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_WorldChat_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_WorldChat_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_WorldChat_C2S));
  Msg_WorldChat_S2C_descriptor_ = file->message_type(3);
  static const int Msg_WorldChat_S2C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_WorldChat_S2C, szname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_WorldChat_S2C, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_WorldChat_S2C, sztext_),
  };
  Msg_WorldChat_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_WorldChat_S2C_descriptor_,
      Msg_WorldChat_S2C::default_instance_,
      Msg_WorldChat_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_WorldChat_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_WorldChat_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_WorldChat_S2C));
  Msg_RoomChat_C2R_descriptor_ = file->message_type(4);
  static const int Msg_RoomChat_C2R_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomChat_C2R, szname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomChat_C2R, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomChat_C2R, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomChat_C2R, sztext_),
  };
  Msg_RoomChat_C2R_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_RoomChat_C2R_descriptor_,
      Msg_RoomChat_C2R::default_instance_,
      Msg_RoomChat_C2R_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomChat_C2R, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomChat_C2R, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_RoomChat_C2R));
  Msg_RoomChat_R2C_descriptor_ = file->message_type(5);
  static const int Msg_RoomChat_R2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomChat_R2C, szname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomChat_R2C, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomChat_R2C, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomChat_R2C, sztext_),
  };
  Msg_RoomChat_R2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_RoomChat_R2C_descriptor_,
      Msg_RoomChat_R2C::default_instance_,
      Msg_RoomChat_R2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomChat_R2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomChat_R2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_RoomChat_R2C));
  Msg_PrivateChat_C2C_descriptor_ = file->message_type(6);
  static const int Msg_PrivateChat_C2C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_PrivateChat_C2C, szname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_PrivateChat_C2C, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_PrivateChat_C2C, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_PrivateChat_C2C, sztext_),
  };
  Msg_PrivateChat_C2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_PrivateChat_C2C_descriptor_,
      Msg_PrivateChat_C2C::default_instance_,
      Msg_PrivateChat_C2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_PrivateChat_C2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_PrivateChat_C2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_PrivateChat_C2C));
  Msg_RoomOperate_C2S_descriptor_ = file->message_type(7);
  static const int Msg_RoomOperate_C2S_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_C2S, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_C2S, operatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_C2S, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_C2S, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_C2S, roomusernumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_C2S, roompattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_C2S, map_),
  };
  Msg_RoomOperate_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_RoomOperate_C2S_descriptor_,
      Msg_RoomOperate_C2S::default_instance_,
      Msg_RoomOperate_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_RoomOperate_C2S));
  Msg_RoomOperate_S2C_descriptor_ = file->message_type(8);
  static const int Msg_RoomOperate_S2C_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_S2C, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_S2C, operatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_S2C, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_S2C, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_S2C, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_S2C, roomusernumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_S2C, roompattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_S2C, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_S2C, map_),
  };
  Msg_RoomOperate_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_RoomOperate_S2C_descriptor_,
      Msg_RoomOperate_S2C::default_instance_,
      Msg_RoomOperate_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomOperate_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_RoomOperate_S2C));
  Msg_StartBattle_C2S_descriptor_ = file->message_type(9);
  static const int Msg_StartBattle_C2S_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartBattle_C2S, szname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartBattle_C2S, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartBattle_C2S, id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartBattle_C2S, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartBattle_C2S, pattern_),
  };
  Msg_StartBattle_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_StartBattle_C2S_descriptor_,
      Msg_StartBattle_C2S::default_instance_,
      Msg_StartBattle_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartBattle_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartBattle_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_StartBattle_C2S));
  Msg_StartBattle_S2C_descriptor_ = file->message_type(10);
  static const int Msg_StartBattle_S2C_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartBattle_S2C, szname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartBattle_S2C, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartBattle_S2C, id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartBattle_S2C, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartBattle_S2C, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartBattle_S2C, battleid_),
  };
  Msg_StartBattle_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_StartBattle_S2C_descriptor_,
      Msg_StartBattle_S2C::default_instance_,
      Msg_StartBattle_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartBattle_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_StartBattle_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_StartBattle_S2C));
  Msg_OriginHandCards_S2C_descriptor_ = file->message_type(11);
  static const int Msg_OriginHandCards_S2C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_OriginHandCards_S2C, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_OriginHandCards_S2C, cards_),
  };
  Msg_OriginHandCards_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_OriginHandCards_S2C_descriptor_,
      Msg_OriginHandCards_S2C::default_instance_,
      Msg_OriginHandCards_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_OriginHandCards_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_OriginHandCards_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_OriginHandCards_S2C));
  Msg_GameUpdate_C2S_descriptor_ = file->message_type(12);
  static const int Msg_GameUpdate_C2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GameUpdate_C2S, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GameUpdate_C2S, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GameUpdate_C2S, usecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GameUpdate_C2S, playerid_),
  };
  Msg_GameUpdate_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_GameUpdate_C2S_descriptor_,
      Msg_GameUpdate_C2S::default_instance_,
      Msg_GameUpdate_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GameUpdate_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GameUpdate_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_GameUpdate_C2S));
  Msg_GameUpdate_S2C_descriptor_ = file->message_type(13);
  static const int Msg_GameUpdate_S2C_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GameUpdate_S2C, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GameUpdate_S2C, player1_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GameUpdate_S2C, player2_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GameUpdate_S2C, player1_usecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GameUpdate_S2C, player2_usecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GameUpdate_S2C, player1_gotcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GameUpdate_S2C, player2_gotcard_),
  };
  Msg_GameUpdate_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_GameUpdate_S2C_descriptor_,
      Msg_GameUpdate_S2C::default_instance_,
      Msg_GameUpdate_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GameUpdate_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GameUpdate_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_GameUpdate_S2C));
  Msg_Surrender_C2S_descriptor_ = file->message_type(14);
  static const int Msg_Surrender_C2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Surrender_C2S, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Surrender_C2S, battleid_),
  };
  Msg_Surrender_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_Surrender_C2S_descriptor_,
      Msg_Surrender_C2S::default_instance_,
      Msg_Surrender_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Surrender_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Surrender_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_Surrender_C2S));
  Msg_Gameover_S2C_descriptor_ = file->message_type(15);
  static const int Msg_Gameover_S2C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Gameover_S2C, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Gameover_S2C, player1_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Gameover_S2C, player2_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Gameover_S2C, player1_victory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Gameover_S2C, player2_victory_),
  };
  Msg_Gameover_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_Gameover_S2C_descriptor_,
      Msg_Gameover_S2C::default_instance_,
      Msg_Gameover_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Gameover_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Gameover_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_Gameover_S2C));
  Msg_RoomList_S2C_descriptor_ = file->message_type(16);
  static const int Msg_RoomList_S2C_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomList_S2C, rooms_),
  };
  Msg_RoomList_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_RoomList_S2C_descriptor_,
      Msg_RoomList_S2C::default_instance_,
      Msg_RoomList_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomList_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_RoomList_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_RoomList_S2C));
  Msg_AccountMsg_C2S_descriptor_ = file->message_type(17);
  static const int Msg_AccountMsg_C2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AccountMsg_C2S, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AccountMsg_C2S, get_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AccountMsg_C2S, headimg_),
  };
  Msg_AccountMsg_C2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_AccountMsg_C2S_descriptor_,
      Msg_AccountMsg_C2S::default_instance_,
      Msg_AccountMsg_C2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AccountMsg_C2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AccountMsg_C2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_AccountMsg_C2S));
  Msg_AccountMsg_S2C_descriptor_ = file->message_type(18);
  static const int Msg_AccountMsg_S2C_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AccountMsg_S2C, account_),
  };
  Msg_AccountMsg_S2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_AccountMsg_S2C_descriptor_,
      Msg_AccountMsg_S2C::default_instance_,
      Msg_AccountMsg_S2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AccountMsg_S2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_AccountMsg_S2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_AccountMsg_S2C));
  protoaccount_descriptor_ = file->message_type(19);
  static const int protoaccount_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protoaccount, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protoaccount, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protoaccount, battlenums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protoaccount, standardbattles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protoaccount, rankbattles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protoaccount, battlewins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protoaccount, standardwins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protoaccount, rankwins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protoaccount, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protoaccount, headimg_),
  };
  protoaccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      protoaccount_descriptor_,
      protoaccount::default_instance_,
      protoaccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protoaccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protoaccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(protoaccount));
  protocard_descriptor_ = file->message_type(20);
  static const int protocard_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protocard, card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protocard, card_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protocard, card_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protocard, card_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protocard, card_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protocard, imgid_),
  };
  protocard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      protocard_descriptor_,
      protocard::default_instance_,
      protocard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protocard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protocard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(protocard));
  protoRoom_descriptor_ = file->message_type(21);
  static const int protoRoom_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protoRoom, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protoRoom, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protoRoom, room_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protoRoom, roompattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protoRoom, map_),
  };
  protoRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      protoRoom_descriptor_,
      protoRoom::default_instance_,
      protoRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protoRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protoRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(protoRoom));
  GamePattern_descriptor_ = file->enum_type(0);
  CardAttribute_descriptor_ = file->enum_type(1);
  MsgType_descriptor_ = file->enum_type(2);
  RoomOperateType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Msg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_Login_C2S_descriptor_, &Msg_Login_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_Login_S2C_descriptor_, &Msg_Login_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_WorldChat_C2S_descriptor_, &Msg_WorldChat_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_WorldChat_S2C_descriptor_, &Msg_WorldChat_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_RoomChat_C2R_descriptor_, &Msg_RoomChat_C2R::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_RoomChat_R2C_descriptor_, &Msg_RoomChat_R2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_PrivateChat_C2C_descriptor_, &Msg_PrivateChat_C2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_RoomOperate_C2S_descriptor_, &Msg_RoomOperate_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_RoomOperate_S2C_descriptor_, &Msg_RoomOperate_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_StartBattle_C2S_descriptor_, &Msg_StartBattle_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_StartBattle_S2C_descriptor_, &Msg_StartBattle_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_OriginHandCards_S2C_descriptor_, &Msg_OriginHandCards_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_GameUpdate_C2S_descriptor_, &Msg_GameUpdate_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_GameUpdate_S2C_descriptor_, &Msg_GameUpdate_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_Surrender_C2S_descriptor_, &Msg_Surrender_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_Gameover_S2C_descriptor_, &Msg_Gameover_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_RoomList_S2C_descriptor_, &Msg_RoomList_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_AccountMsg_C2S_descriptor_, &Msg_AccountMsg_C2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_AccountMsg_S2C_descriptor_, &Msg_AccountMsg_S2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    protoaccount_descriptor_, &protoaccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    protocard_descriptor_, &protocard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    protoRoom_descriptor_, &protoRoom::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Msg_2eproto() {
  delete Msg_Login_C2S::default_instance_;
  delete Msg_Login_C2S_reflection_;
  delete Msg_Login_S2C::default_instance_;
  delete Msg_Login_S2C_reflection_;
  delete Msg_WorldChat_C2S::default_instance_;
  delete Msg_WorldChat_C2S_reflection_;
  delete Msg_WorldChat_S2C::default_instance_;
  delete Msg_WorldChat_S2C_reflection_;
  delete Msg_RoomChat_C2R::default_instance_;
  delete Msg_RoomChat_C2R_reflection_;
  delete Msg_RoomChat_R2C::default_instance_;
  delete Msg_RoomChat_R2C_reflection_;
  delete Msg_PrivateChat_C2C::default_instance_;
  delete Msg_PrivateChat_C2C_reflection_;
  delete Msg_RoomOperate_C2S::default_instance_;
  delete Msg_RoomOperate_C2S_reflection_;
  delete Msg_RoomOperate_S2C::default_instance_;
  delete Msg_RoomOperate_S2C_reflection_;
  delete Msg_StartBattle_C2S::default_instance_;
  delete Msg_StartBattle_C2S_reflection_;
  delete Msg_StartBattle_S2C::default_instance_;
  delete Msg_StartBattle_S2C_reflection_;
  delete Msg_OriginHandCards_S2C::default_instance_;
  delete Msg_OriginHandCards_S2C_reflection_;
  delete Msg_GameUpdate_C2S::default_instance_;
  delete Msg_GameUpdate_C2S_reflection_;
  delete Msg_GameUpdate_S2C::default_instance_;
  delete Msg_GameUpdate_S2C_reflection_;
  delete Msg_Surrender_C2S::default_instance_;
  delete Msg_Surrender_C2S_reflection_;
  delete Msg_Gameover_S2C::default_instance_;
  delete Msg_Gameover_S2C_reflection_;
  delete Msg_RoomList_S2C::default_instance_;
  delete Msg_RoomList_S2C_reflection_;
  delete Msg_AccountMsg_C2S::default_instance_;
  delete Msg_AccountMsg_C2S_reflection_;
  delete Msg_AccountMsg_S2C::default_instance_;
  delete Msg_AccountMsg_S2C_reflection_;
  delete protoaccount::default_instance_;
  delete protoaccount_reflection_;
  delete protocard::default_instance_;
  delete protocard_reflection_;
  delete protoRoom::default_instance_;
  delete protoRoom_reflection_;
}

void protobuf_AddDesc_Msg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tMsg.proto\"F\n\rMsg_Login_C2S\022\021\n\tconMetho"
    "d\030\001 \002(\007\022\016\n\006szName\030\002 \002(\t\022\022\n\nszPassWord\030\003 "
    "\002(\t\"5\n\rMsg_Login_S2C\022\020\n\010clientId\030\001 \002(\007\022\022"
    "\n\nconSuccess\030\002 \002(\010\"\?\n\021Msg_WorldChat_C2S\022"
    "\016\n\006szName\030\001 \002(\t\022\n\n\002ID\030\002 \002(\007\022\016\n\006szText\030\003 "
    "\002(\t\"\?\n\021Msg_WorldChat_S2C\022\016\n\006szName\030\001 \002(\t"
    "\022\n\n\002ID\030\002 \002(\007\022\016\n\006szText\030\003 \002(\t\"N\n\020Msg_Room"
    "Chat_C2R\022\016\n\006szName\030\001 \002(\t\022\n\n\002ID\030\002 \002(\007\022\016\n\006"
    "roomID\030\003 \002(\007\022\016\n\006szText\030\004 \002(\t\"N\n\020Msg_Room"
    "Chat_R2C\022\016\n\006szName\030\001 \002(\t\022\n\n\002ID\030\002 \002(\007\022\016\n\006"
    "roomID\030\003 \002(\007\022\016\n\006szText\030\004 \002(\t\"S\n\023Msg_Priv"
    "ateChat_C2C\022\016\n\006szName\030\001 \002(\t\022\n\n\002ID\030\002 \002(\007\022"
    "\020\n\010targetID\030\003 \002(\007\022\016\n\006szText\030\004 \002(\t\"\262\001\n\023Ms"
    "g_RoomOperate_C2S\022\n\n\002ID\030\001 \002(\007\022%\n\013operate"
    "Type\030\002 \002(\0162\020.RoomOperateType\022\016\n\006roomID\030\003"
    " \001(\007\022\020\n\010roomName\030\004 \001(\t\022\026\n\016roomUserNumber"
    "\030\005 \001(\007\022!\n\013roomPattern\030\006 \001(\0162\014.GamePatter"
    "n\022\013\n\003Map\030\007 \001(\t\"\343\001\n\023Msg_RoomOperate_S2C\022\n"
    "\n\002ID\030\001 \002(\007\022%\n\013operateType\030\002 \002(\0162\020.RoomOp"
    "erateType\022\016\n\006roomID\030\003 \002(\007\022\017\n\007success\030\004 \002"
    "(\010\022\020\n\010roomName\030\005 \001(\t\022\026\n\016roomUserNumber\030\006"
    " \001(\007\022!\n\013roomPattern\030\007 \001(\0162\014.GamePattern\022"
    "\036\n\007players\030\010 \003(\0132\r.protoaccount\022\013\n\003Map\030\t"
    " \001(\t\"m\n\023Msg_StartBattle_C2S\022\016\n\006szName\030\001 "
    "\002(\t\022\n\n\002ID\030\002 \002(\007\022\013\n\003ID2\030\003 \002(\007\022\016\n\006roomID\030\004"
    " \002(\007\022\035\n\007pattern\030\005 \002(\0162\014.GamePattern\"\177\n\023M"
    "sg_StartBattle_S2C\022\016\n\006szName\030\001 \002(\t\022\n\n\002ID"
    "\030\002 \002(\007\022\013\n\003ID2\030\003 \002(\007\022\016\n\006roomID\030\004 \002(\007\022\035\n\007p"
    "attern\030\005 \002(\0162\014.GamePattern\022\020\n\010BattleId\030\006"
    " \002(\007\"F\n\027Msg_OriginHandCards_S2C\022\020\n\010playe"
    "rid\030\001 \002(\007\022\031\n\005cards\030\002 \003(\0132\n.protocard\"d\n\022"
    "Msg_GameUpdate_C2S\022\020\n\010BattleId\030\001 \002(\007\022\r\n\005"
    "Round\030\002 \002(\007\022\033\n\007useCard\030\003 \002(\0132\n.protocard"
    "\022\020\n\010playerID\030\004 \002(\007\"\342\001\n\022Msg_GameUpdate_S2"
    "C\022\020\n\010BattleId\030\001 \002(\007\022\022\n\nplayer1_hp\030\002 \002(\007\022"
    "\022\n\nplayer2_hp\030\003 \002(\007\022#\n\017player1_usecard\030\004"
    " \002(\0132\n.protocard\022#\n\017player2_usecard\030\005 \002("
    "\0132\n.protocard\022#\n\017player1_gotCard\030\006 \001(\0132\n"
    ".protocard\022#\n\017player2_gotCard\030\007 \001(\0132\n.pr"
    "otocard\"1\n\021Msg_Surrender_C2S\022\n\n\002ID\030\001 \002(\007"
    "\022\020\n\010BattleId\030\002 \002(\007\"~\n\020Msg_Gameover_S2C\022\020"
    "\n\010BattleId\030\001 \002(\007\022\022\n\nplayer1_id\030\002 \002(\007\022\022\n\n"
    "player2_id\030\003 \002(\007\022\027\n\017player1_victory\030\004 \002("
    "\010\022\027\n\017player2_victory\030\005 \002(\010\"-\n\020Msg_RoomLi"
    "st_S2C\022\031\n\005rooms\030\001 \003(\0132\n.protoRoom\"E\n\022Msg"
    "_AccountMsg_C2S\022\021\n\trequestid\030\001 \002(\007\022\013\n\003ge"
    "t\030\002 \002(\010\022\017\n\007headImg\030\003 \001(\t\"4\n\022Msg_AccountM"
    "sg_S2C\022\036\n\007account\030\001 \001(\0132\r.protoaccount\"\311"
    "\001\n\014protoaccount\022\014\n\004name\030\001 \001(\t\022\r\n\005Score\030\002"
    " \001(\007\022\022\n\nBattleNums\030\003 \001(\007\022\027\n\017StandardBatt"
    "les\030\004 \001(\007\022\023\n\013RankBattles\030\005 \001(\007\022\022\n\nBattle"
    "Wins\030\006 \001(\007\022\024\n\014StandardWins\030\007 \001(\007\022\020\n\010Rank"
    "Wins\030\010 \001(\007\022\r\n\005title\030\t \001(\t\022\017\n\007HeadImg\030\n \001"
    "(\t\"\216\001\n\tprotocard\022\017\n\007card_id\030\001 \002(\007\022&\n\016car"
    "d_attribute\030\002 \002(\0162\016.CardAttribute\022\021\n\tcar"
    "d_type\030\003 \002(\007\022\022\n\ncard_value\030\004 \002(\007\022\022\n\ncard"
    "_image\030\005 \001(\t\022\r\n\005imgID\030\006 \001(\007\"s\n\tprotoRoom"
    "\022\017\n\007room_id\030\001 \002(\007\022\021\n\troom_name\030\002 \002(\t\022\022\n\n"
    "room_users\030\003 \002(\007\022!\n\013roompattern\030\004 \002(\0162\014."
    "GamePattern\022\013\n\003map\030\005 \001(\t*%\n\013GamePattern\022"
    "\014\n\010Standard\020\000\022\010\n\004Rank\020\001*M\n\rCardAttribute"
    "\022\010\n\004none\020\000\022\010\n\004fire\020\001\022\t\n\005water\020\002\022\010\n\004wood\020"
    "\003\022\t\n\005light\020\004\022\010\n\004dark\020\005*\372\002\n\007MsgType\022\r\n\tLO"
    "GIN_C2S\020\000\022\r\n\tLOGIN_S2C\020\001\022\021\n\rWORLDCHAT_C2"
    "S\020\002\022\021\n\rWORLDCHAT_S2C\020\003\022\020\n\014ROOMCHAT_C2R\020\004"
    "\022\020\n\014ROOMCHAT_R2C\020\005\022\023\n\017PRIVATECHAT_C2C\020\006\022"
    "\023\n\017RoomOperate_C2S\020\007\022\023\n\017RoomOperate_S2C\020"
    "\010\022\023\n\017StartBattle_C2S\020\t\022\023\n\017StartBattle_S2"
    "C\020\n\022\022\n\016GameUpdate_C2S\020\013\022\022\n\016GameUpdate_S2"
    "C\020\014\022\021\n\rSurrender_C2S\020\r\022\020\n\014GameOver_S2C\020\016"
    "\022\027\n\023OriginHandCards_S2C\020\017\022\020\n\014RoomList_S2"
    "C\020\020\022\022\n\016AccountMsg_C2S\020\021\022\022\n\016AccountMsg_S2"
    "C\020\022*\\\n\017RoomOperateType\022\016\n\nCREATEROOM\020\000\022\014"
    "\n\010JOINROOM\020\001\022\014\n\010EXITROOM\020\002\022\017\n\013ROOMMESSAG"
    "E\020\003\022\014\n\010ROOMLIST\020\004", 2977);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Msg.proto", &protobuf_RegisterTypes);
  Msg_Login_C2S::default_instance_ = new Msg_Login_C2S();
  Msg_Login_S2C::default_instance_ = new Msg_Login_S2C();
  Msg_WorldChat_C2S::default_instance_ = new Msg_WorldChat_C2S();
  Msg_WorldChat_S2C::default_instance_ = new Msg_WorldChat_S2C();
  Msg_RoomChat_C2R::default_instance_ = new Msg_RoomChat_C2R();
  Msg_RoomChat_R2C::default_instance_ = new Msg_RoomChat_R2C();
  Msg_PrivateChat_C2C::default_instance_ = new Msg_PrivateChat_C2C();
  Msg_RoomOperate_C2S::default_instance_ = new Msg_RoomOperate_C2S();
  Msg_RoomOperate_S2C::default_instance_ = new Msg_RoomOperate_S2C();
  Msg_StartBattle_C2S::default_instance_ = new Msg_StartBattle_C2S();
  Msg_StartBattle_S2C::default_instance_ = new Msg_StartBattle_S2C();
  Msg_OriginHandCards_S2C::default_instance_ = new Msg_OriginHandCards_S2C();
  Msg_GameUpdate_C2S::default_instance_ = new Msg_GameUpdate_C2S();
  Msg_GameUpdate_S2C::default_instance_ = new Msg_GameUpdate_S2C();
  Msg_Surrender_C2S::default_instance_ = new Msg_Surrender_C2S();
  Msg_Gameover_S2C::default_instance_ = new Msg_Gameover_S2C();
  Msg_RoomList_S2C::default_instance_ = new Msg_RoomList_S2C();
  Msg_AccountMsg_C2S::default_instance_ = new Msg_AccountMsg_C2S();
  Msg_AccountMsg_S2C::default_instance_ = new Msg_AccountMsg_S2C();
  protoaccount::default_instance_ = new protoaccount();
  protocard::default_instance_ = new protocard();
  protoRoom::default_instance_ = new protoRoom();
  Msg_Login_C2S::default_instance_->InitAsDefaultInstance();
  Msg_Login_S2C::default_instance_->InitAsDefaultInstance();
  Msg_WorldChat_C2S::default_instance_->InitAsDefaultInstance();
  Msg_WorldChat_S2C::default_instance_->InitAsDefaultInstance();
  Msg_RoomChat_C2R::default_instance_->InitAsDefaultInstance();
  Msg_RoomChat_R2C::default_instance_->InitAsDefaultInstance();
  Msg_PrivateChat_C2C::default_instance_->InitAsDefaultInstance();
  Msg_RoomOperate_C2S::default_instance_->InitAsDefaultInstance();
  Msg_RoomOperate_S2C::default_instance_->InitAsDefaultInstance();
  Msg_StartBattle_C2S::default_instance_->InitAsDefaultInstance();
  Msg_StartBattle_S2C::default_instance_->InitAsDefaultInstance();
  Msg_OriginHandCards_S2C::default_instance_->InitAsDefaultInstance();
  Msg_GameUpdate_C2S::default_instance_->InitAsDefaultInstance();
  Msg_GameUpdate_S2C::default_instance_->InitAsDefaultInstance();
  Msg_Surrender_C2S::default_instance_->InitAsDefaultInstance();
  Msg_Gameover_S2C::default_instance_->InitAsDefaultInstance();
  Msg_RoomList_S2C::default_instance_->InitAsDefaultInstance();
  Msg_AccountMsg_C2S::default_instance_->InitAsDefaultInstance();
  Msg_AccountMsg_S2C::default_instance_->InitAsDefaultInstance();
  protoaccount::default_instance_->InitAsDefaultInstance();
  protocard::default_instance_->InitAsDefaultInstance();
  protoRoom::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Msg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Msg_2eproto {
  StaticDescriptorInitializer_Msg_2eproto() {
    protobuf_AddDesc_Msg_2eproto();
  }
} static_descriptor_initializer_Msg_2eproto_;
const ::google::protobuf::EnumDescriptor* GamePattern_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePattern_descriptor_;
}
bool GamePattern_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CardAttribute_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardAttribute_descriptor_;
}
bool CardAttribute_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RoomOperateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomOperateType_descriptor_;
}
bool RoomOperateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_Login_C2S::kConMethodFieldNumber;
const int Msg_Login_C2S::kSzNameFieldNumber;
const int Msg_Login_C2S::kSzPassWordFieldNumber;
#endif  // !_MSC_VER

Msg_Login_C2S::Msg_Login_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_Login_C2S::InitAsDefaultInstance() {
}

Msg_Login_C2S::Msg_Login_C2S(const Msg_Login_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_Login_C2S::SharedCtor() {
  _cached_size_ = 0;
  conmethod_ = 0u;
  szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  szpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_Login_C2S::~Msg_Login_C2S() {
  SharedDtor();
}

void Msg_Login_C2S::SharedDtor() {
  if (szname_ != &::google::protobuf::internal::kEmptyString) {
    delete szname_;
  }
  if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete szpassword_;
  }
  if (this != default_instance_) {
  }
}

void Msg_Login_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_Login_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_Login_C2S_descriptor_;
}

const Msg_Login_C2S& Msg_Login_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_Login_C2S* Msg_Login_C2S::default_instance_ = NULL;

Msg_Login_C2S* Msg_Login_C2S::New() const {
  return new Msg_Login_C2S;
}

void Msg_Login_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    conmethod_ = 0u;
    if (has_szname()) {
      if (szname_ != &::google::protobuf::internal::kEmptyString) {
        szname_->clear();
      }
    }
    if (has_szpassword()) {
      if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
        szpassword_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_Login_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 conMethod = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &conmethod_)));
          set_has_conmethod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_szName;
        break;
      }

      // required string szName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szname().data(), this->szname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_szPassWord;
        break;
      }

      // required string szPassWord = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szPassWord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szpassword().data(), this->szpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_Login_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 conMethod = 1;
  if (has_conmethod()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->conmethod(), output);
  }

  // required string szName = 2;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->szname(), output);
  }

  // required string szPassWord = 3;
  if (has_szpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szpassword().data(), this->szpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->szpassword(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_Login_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 conMethod = 1;
  if (has_conmethod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->conmethod(), target);
  }

  // required string szName = 2;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szname(), target);
  }

  // required string szPassWord = 3;
  if (has_szpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szpassword().data(), this->szpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->szpassword(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_Login_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 conMethod = 1;
    if (has_conmethod()) {
      total_size += 1 + 4;
    }

    // required string szName = 2;
    if (has_szname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szname());
    }

    // required string szPassWord = 3;
    if (has_szpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szpassword());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_Login_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_Login_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_Login_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_Login_C2S::MergeFrom(const Msg_Login_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_conmethod()) {
      set_conmethod(from.conmethod());
    }
    if (from.has_szname()) {
      set_szname(from.szname());
    }
    if (from.has_szpassword()) {
      set_szpassword(from.szpassword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_Login_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_Login_C2S::CopyFrom(const Msg_Login_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Login_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Msg_Login_C2S::Swap(Msg_Login_C2S* other) {
  if (other != this) {
    std::swap(conmethod_, other->conmethod_);
    std::swap(szname_, other->szname_);
    std::swap(szpassword_, other->szpassword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_Login_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_Login_C2S_descriptor_;
  metadata.reflection = Msg_Login_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_Login_S2C::kClientIdFieldNumber;
const int Msg_Login_S2C::kConSuccessFieldNumber;
#endif  // !_MSC_VER

Msg_Login_S2C::Msg_Login_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_Login_S2C::InitAsDefaultInstance() {
}

Msg_Login_S2C::Msg_Login_S2C(const Msg_Login_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_Login_S2C::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  consuccess_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_Login_S2C::~Msg_Login_S2C() {
  SharedDtor();
}

void Msg_Login_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_Login_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_Login_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_Login_S2C_descriptor_;
}

const Msg_Login_S2C& Msg_Login_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_Login_S2C* Msg_Login_S2C::default_instance_ = NULL;

Msg_Login_S2C* Msg_Login_S2C::New() const {
  return new Msg_Login_S2C;
}

void Msg_Login_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientid_ = 0u;
    consuccess_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_Login_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 clientId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_conSuccess;
        break;
      }

      // required bool conSuccess = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conSuccess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &consuccess_)));
          set_has_consuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_Login_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 clientId = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->clientid(), output);
  }

  // required bool conSuccess = 2;
  if (has_consuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->consuccess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_Login_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 clientId = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->clientid(), target);
  }

  // required bool conSuccess = 2;
  if (has_consuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->consuccess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_Login_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 clientId = 1;
    if (has_clientid()) {
      total_size += 1 + 4;
    }

    // required bool conSuccess = 2;
    if (has_consuccess()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_Login_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_Login_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_Login_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_Login_S2C::MergeFrom(const Msg_Login_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_consuccess()) {
      set_consuccess(from.consuccess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_Login_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_Login_S2C::CopyFrom(const Msg_Login_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Login_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Msg_Login_S2C::Swap(Msg_Login_S2C* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(consuccess_, other->consuccess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_Login_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_Login_S2C_descriptor_;
  metadata.reflection = Msg_Login_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_WorldChat_C2S::kSzNameFieldNumber;
const int Msg_WorldChat_C2S::kIDFieldNumber;
const int Msg_WorldChat_C2S::kSzTextFieldNumber;
#endif  // !_MSC_VER

Msg_WorldChat_C2S::Msg_WorldChat_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_WorldChat_C2S::InitAsDefaultInstance() {
}

Msg_WorldChat_C2S::Msg_WorldChat_C2S(const Msg_WorldChat_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_WorldChat_C2S::SharedCtor() {
  _cached_size_ = 0;
  szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0u;
  sztext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_WorldChat_C2S::~Msg_WorldChat_C2S() {
  SharedDtor();
}

void Msg_WorldChat_C2S::SharedDtor() {
  if (szname_ != &::google::protobuf::internal::kEmptyString) {
    delete szname_;
  }
  if (sztext_ != &::google::protobuf::internal::kEmptyString) {
    delete sztext_;
  }
  if (this != default_instance_) {
  }
}

void Msg_WorldChat_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_WorldChat_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_WorldChat_C2S_descriptor_;
}

const Msg_WorldChat_C2S& Msg_WorldChat_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_WorldChat_C2S* Msg_WorldChat_C2S::default_instance_ = NULL;

Msg_WorldChat_C2S* Msg_WorldChat_C2S::New() const {
  return new Msg_WorldChat_C2S;
}

void Msg_WorldChat_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_szname()) {
      if (szname_ != &::google::protobuf::internal::kEmptyString) {
        szname_->clear();
      }
    }
    id_ = 0u;
    if (has_sztext()) {
      if (sztext_ != &::google::protobuf::internal::kEmptyString) {
        sztext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_WorldChat_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string szName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szname().data(), this->szname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_ID;
        break;
      }

      // required fixed32 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_szText;
        break;
      }

      // required string szText = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sztext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sztext().data(), this->sztext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_WorldChat_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string szName = 1;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->szname(), output);
  }

  // required fixed32 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->id(), output);
  }

  // required string szText = 3;
  if (has_sztext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sztext().data(), this->sztext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sztext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_WorldChat_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string szName = 1;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->szname(), target);
  }

  // required fixed32 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->id(), target);
  }

  // required string szText = 3;
  if (has_sztext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sztext().data(), this->sztext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sztext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_WorldChat_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string szName = 1;
    if (has_szname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szname());
    }

    // required fixed32 ID = 2;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // required string szText = 3;
    if (has_sztext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sztext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_WorldChat_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_WorldChat_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_WorldChat_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_WorldChat_C2S::MergeFrom(const Msg_WorldChat_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szname()) {
      set_szname(from.szname());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sztext()) {
      set_sztext(from.sztext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_WorldChat_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_WorldChat_C2S::CopyFrom(const Msg_WorldChat_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_WorldChat_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Msg_WorldChat_C2S::Swap(Msg_WorldChat_C2S* other) {
  if (other != this) {
    std::swap(szname_, other->szname_);
    std::swap(id_, other->id_);
    std::swap(sztext_, other->sztext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_WorldChat_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_WorldChat_C2S_descriptor_;
  metadata.reflection = Msg_WorldChat_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_WorldChat_S2C::kSzNameFieldNumber;
const int Msg_WorldChat_S2C::kIDFieldNumber;
const int Msg_WorldChat_S2C::kSzTextFieldNumber;
#endif  // !_MSC_VER

Msg_WorldChat_S2C::Msg_WorldChat_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_WorldChat_S2C::InitAsDefaultInstance() {
}

Msg_WorldChat_S2C::Msg_WorldChat_S2C(const Msg_WorldChat_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_WorldChat_S2C::SharedCtor() {
  _cached_size_ = 0;
  szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0u;
  sztext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_WorldChat_S2C::~Msg_WorldChat_S2C() {
  SharedDtor();
}

void Msg_WorldChat_S2C::SharedDtor() {
  if (szname_ != &::google::protobuf::internal::kEmptyString) {
    delete szname_;
  }
  if (sztext_ != &::google::protobuf::internal::kEmptyString) {
    delete sztext_;
  }
  if (this != default_instance_) {
  }
}

void Msg_WorldChat_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_WorldChat_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_WorldChat_S2C_descriptor_;
}

const Msg_WorldChat_S2C& Msg_WorldChat_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_WorldChat_S2C* Msg_WorldChat_S2C::default_instance_ = NULL;

Msg_WorldChat_S2C* Msg_WorldChat_S2C::New() const {
  return new Msg_WorldChat_S2C;
}

void Msg_WorldChat_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_szname()) {
      if (szname_ != &::google::protobuf::internal::kEmptyString) {
        szname_->clear();
      }
    }
    id_ = 0u;
    if (has_sztext()) {
      if (sztext_ != &::google::protobuf::internal::kEmptyString) {
        sztext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_WorldChat_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string szName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szname().data(), this->szname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_ID;
        break;
      }

      // required fixed32 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_szText;
        break;
      }

      // required string szText = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sztext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sztext().data(), this->sztext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_WorldChat_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string szName = 1;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->szname(), output);
  }

  // required fixed32 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->id(), output);
  }

  // required string szText = 3;
  if (has_sztext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sztext().data(), this->sztext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sztext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_WorldChat_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string szName = 1;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->szname(), target);
  }

  // required fixed32 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->id(), target);
  }

  // required string szText = 3;
  if (has_sztext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sztext().data(), this->sztext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sztext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_WorldChat_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string szName = 1;
    if (has_szname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szname());
    }

    // required fixed32 ID = 2;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // required string szText = 3;
    if (has_sztext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sztext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_WorldChat_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_WorldChat_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_WorldChat_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_WorldChat_S2C::MergeFrom(const Msg_WorldChat_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szname()) {
      set_szname(from.szname());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sztext()) {
      set_sztext(from.sztext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_WorldChat_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_WorldChat_S2C::CopyFrom(const Msg_WorldChat_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_WorldChat_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Msg_WorldChat_S2C::Swap(Msg_WorldChat_S2C* other) {
  if (other != this) {
    std::swap(szname_, other->szname_);
    std::swap(id_, other->id_);
    std::swap(sztext_, other->sztext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_WorldChat_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_WorldChat_S2C_descriptor_;
  metadata.reflection = Msg_WorldChat_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_RoomChat_C2R::kSzNameFieldNumber;
const int Msg_RoomChat_C2R::kIDFieldNumber;
const int Msg_RoomChat_C2R::kRoomIDFieldNumber;
const int Msg_RoomChat_C2R::kSzTextFieldNumber;
#endif  // !_MSC_VER

Msg_RoomChat_C2R::Msg_RoomChat_C2R()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_RoomChat_C2R::InitAsDefaultInstance() {
}

Msg_RoomChat_C2R::Msg_RoomChat_C2R(const Msg_RoomChat_C2R& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_RoomChat_C2R::SharedCtor() {
  _cached_size_ = 0;
  szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0u;
  roomid_ = 0u;
  sztext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_RoomChat_C2R::~Msg_RoomChat_C2R() {
  SharedDtor();
}

void Msg_RoomChat_C2R::SharedDtor() {
  if (szname_ != &::google::protobuf::internal::kEmptyString) {
    delete szname_;
  }
  if (sztext_ != &::google::protobuf::internal::kEmptyString) {
    delete sztext_;
  }
  if (this != default_instance_) {
  }
}

void Msg_RoomChat_C2R::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_RoomChat_C2R::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_RoomChat_C2R_descriptor_;
}

const Msg_RoomChat_C2R& Msg_RoomChat_C2R::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_RoomChat_C2R* Msg_RoomChat_C2R::default_instance_ = NULL;

Msg_RoomChat_C2R* Msg_RoomChat_C2R::New() const {
  return new Msg_RoomChat_C2R;
}

void Msg_RoomChat_C2R::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_szname()) {
      if (szname_ != &::google::protobuf::internal::kEmptyString) {
        szname_->clear();
      }
    }
    id_ = 0u;
    roomid_ = 0u;
    if (has_sztext()) {
      if (sztext_ != &::google::protobuf::internal::kEmptyString) {
        sztext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_RoomChat_C2R::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string szName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szname().data(), this->szname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_ID;
        break;
      }

      // required fixed32 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_roomID;
        break;
      }

      // required fixed32 roomID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_szText;
        break;
      }

      // required string szText = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sztext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sztext().data(), this->sztext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_RoomChat_C2R::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string szName = 1;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->szname(), output);
  }

  // required fixed32 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->id(), output);
  }

  // required fixed32 roomID = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->roomid(), output);
  }

  // required string szText = 4;
  if (has_sztext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sztext().data(), this->sztext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sztext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_RoomChat_C2R::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string szName = 1;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->szname(), target);
  }

  // required fixed32 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->id(), target);
  }

  // required fixed32 roomID = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->roomid(), target);
  }

  // required string szText = 4;
  if (has_sztext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sztext().data(), this->sztext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sztext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_RoomChat_C2R::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string szName = 1;
    if (has_szname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szname());
    }

    // required fixed32 ID = 2;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // required fixed32 roomID = 3;
    if (has_roomid()) {
      total_size += 1 + 4;
    }

    // required string szText = 4;
    if (has_sztext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sztext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_RoomChat_C2R::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_RoomChat_C2R* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_RoomChat_C2R*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_RoomChat_C2R::MergeFrom(const Msg_RoomChat_C2R& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szname()) {
      set_szname(from.szname());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_sztext()) {
      set_sztext(from.sztext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_RoomChat_C2R::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_RoomChat_C2R::CopyFrom(const Msg_RoomChat_C2R& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_RoomChat_C2R::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Msg_RoomChat_C2R::Swap(Msg_RoomChat_C2R* other) {
  if (other != this) {
    std::swap(szname_, other->szname_);
    std::swap(id_, other->id_);
    std::swap(roomid_, other->roomid_);
    std::swap(sztext_, other->sztext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_RoomChat_C2R::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_RoomChat_C2R_descriptor_;
  metadata.reflection = Msg_RoomChat_C2R_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_RoomChat_R2C::kSzNameFieldNumber;
const int Msg_RoomChat_R2C::kIDFieldNumber;
const int Msg_RoomChat_R2C::kRoomIDFieldNumber;
const int Msg_RoomChat_R2C::kSzTextFieldNumber;
#endif  // !_MSC_VER

Msg_RoomChat_R2C::Msg_RoomChat_R2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_RoomChat_R2C::InitAsDefaultInstance() {
}

Msg_RoomChat_R2C::Msg_RoomChat_R2C(const Msg_RoomChat_R2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_RoomChat_R2C::SharedCtor() {
  _cached_size_ = 0;
  szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0u;
  roomid_ = 0u;
  sztext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_RoomChat_R2C::~Msg_RoomChat_R2C() {
  SharedDtor();
}

void Msg_RoomChat_R2C::SharedDtor() {
  if (szname_ != &::google::protobuf::internal::kEmptyString) {
    delete szname_;
  }
  if (sztext_ != &::google::protobuf::internal::kEmptyString) {
    delete sztext_;
  }
  if (this != default_instance_) {
  }
}

void Msg_RoomChat_R2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_RoomChat_R2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_RoomChat_R2C_descriptor_;
}

const Msg_RoomChat_R2C& Msg_RoomChat_R2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_RoomChat_R2C* Msg_RoomChat_R2C::default_instance_ = NULL;

Msg_RoomChat_R2C* Msg_RoomChat_R2C::New() const {
  return new Msg_RoomChat_R2C;
}

void Msg_RoomChat_R2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_szname()) {
      if (szname_ != &::google::protobuf::internal::kEmptyString) {
        szname_->clear();
      }
    }
    id_ = 0u;
    roomid_ = 0u;
    if (has_sztext()) {
      if (sztext_ != &::google::protobuf::internal::kEmptyString) {
        sztext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_RoomChat_R2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string szName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szname().data(), this->szname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_ID;
        break;
      }

      // required fixed32 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_roomID;
        break;
      }

      // required fixed32 roomID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_szText;
        break;
      }

      // required string szText = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sztext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sztext().data(), this->sztext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_RoomChat_R2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string szName = 1;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->szname(), output);
  }

  // required fixed32 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->id(), output);
  }

  // required fixed32 roomID = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->roomid(), output);
  }

  // required string szText = 4;
  if (has_sztext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sztext().data(), this->sztext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sztext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_RoomChat_R2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string szName = 1;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->szname(), target);
  }

  // required fixed32 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->id(), target);
  }

  // required fixed32 roomID = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->roomid(), target);
  }

  // required string szText = 4;
  if (has_sztext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sztext().data(), this->sztext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sztext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_RoomChat_R2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string szName = 1;
    if (has_szname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szname());
    }

    // required fixed32 ID = 2;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // required fixed32 roomID = 3;
    if (has_roomid()) {
      total_size += 1 + 4;
    }

    // required string szText = 4;
    if (has_sztext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sztext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_RoomChat_R2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_RoomChat_R2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_RoomChat_R2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_RoomChat_R2C::MergeFrom(const Msg_RoomChat_R2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szname()) {
      set_szname(from.szname());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_sztext()) {
      set_sztext(from.sztext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_RoomChat_R2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_RoomChat_R2C::CopyFrom(const Msg_RoomChat_R2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_RoomChat_R2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Msg_RoomChat_R2C::Swap(Msg_RoomChat_R2C* other) {
  if (other != this) {
    std::swap(szname_, other->szname_);
    std::swap(id_, other->id_);
    std::swap(roomid_, other->roomid_);
    std::swap(sztext_, other->sztext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_RoomChat_R2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_RoomChat_R2C_descriptor_;
  metadata.reflection = Msg_RoomChat_R2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_PrivateChat_C2C::kSzNameFieldNumber;
const int Msg_PrivateChat_C2C::kIDFieldNumber;
const int Msg_PrivateChat_C2C::kTargetIDFieldNumber;
const int Msg_PrivateChat_C2C::kSzTextFieldNumber;
#endif  // !_MSC_VER

Msg_PrivateChat_C2C::Msg_PrivateChat_C2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_PrivateChat_C2C::InitAsDefaultInstance() {
}

Msg_PrivateChat_C2C::Msg_PrivateChat_C2C(const Msg_PrivateChat_C2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_PrivateChat_C2C::SharedCtor() {
  _cached_size_ = 0;
  szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0u;
  targetid_ = 0u;
  sztext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_PrivateChat_C2C::~Msg_PrivateChat_C2C() {
  SharedDtor();
}

void Msg_PrivateChat_C2C::SharedDtor() {
  if (szname_ != &::google::protobuf::internal::kEmptyString) {
    delete szname_;
  }
  if (sztext_ != &::google::protobuf::internal::kEmptyString) {
    delete sztext_;
  }
  if (this != default_instance_) {
  }
}

void Msg_PrivateChat_C2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_PrivateChat_C2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_PrivateChat_C2C_descriptor_;
}

const Msg_PrivateChat_C2C& Msg_PrivateChat_C2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_PrivateChat_C2C* Msg_PrivateChat_C2C::default_instance_ = NULL;

Msg_PrivateChat_C2C* Msg_PrivateChat_C2C::New() const {
  return new Msg_PrivateChat_C2C;
}

void Msg_PrivateChat_C2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_szname()) {
      if (szname_ != &::google::protobuf::internal::kEmptyString) {
        szname_->clear();
      }
    }
    id_ = 0u;
    targetid_ = 0u;
    if (has_sztext()) {
      if (sztext_ != &::google::protobuf::internal::kEmptyString) {
        sztext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_PrivateChat_C2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string szName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szname().data(), this->szname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_ID;
        break;
      }

      // required fixed32 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_targetID;
        break;
      }

      // required fixed32 targetID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_szText;
        break;
      }

      // required string szText = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sztext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sztext().data(), this->sztext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_PrivateChat_C2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string szName = 1;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->szname(), output);
  }

  // required fixed32 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->id(), output);
  }

  // required fixed32 targetID = 3;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->targetid(), output);
  }

  // required string szText = 4;
  if (has_sztext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sztext().data(), this->sztext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sztext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_PrivateChat_C2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string szName = 1;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->szname(), target);
  }

  // required fixed32 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->id(), target);
  }

  // required fixed32 targetID = 3;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->targetid(), target);
  }

  // required string szText = 4;
  if (has_sztext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sztext().data(), this->sztext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sztext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_PrivateChat_C2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string szName = 1;
    if (has_szname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szname());
    }

    // required fixed32 ID = 2;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // required fixed32 targetID = 3;
    if (has_targetid()) {
      total_size += 1 + 4;
    }

    // required string szText = 4;
    if (has_sztext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sztext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_PrivateChat_C2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_PrivateChat_C2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_PrivateChat_C2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_PrivateChat_C2C::MergeFrom(const Msg_PrivateChat_C2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szname()) {
      set_szname(from.szname());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_sztext()) {
      set_sztext(from.sztext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_PrivateChat_C2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_PrivateChat_C2C::CopyFrom(const Msg_PrivateChat_C2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_PrivateChat_C2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Msg_PrivateChat_C2C::Swap(Msg_PrivateChat_C2C* other) {
  if (other != this) {
    std::swap(szname_, other->szname_);
    std::swap(id_, other->id_);
    std::swap(targetid_, other->targetid_);
    std::swap(sztext_, other->sztext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_PrivateChat_C2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_PrivateChat_C2C_descriptor_;
  metadata.reflection = Msg_PrivateChat_C2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_RoomOperate_C2S::kIDFieldNumber;
const int Msg_RoomOperate_C2S::kOperateTypeFieldNumber;
const int Msg_RoomOperate_C2S::kRoomIDFieldNumber;
const int Msg_RoomOperate_C2S::kRoomNameFieldNumber;
const int Msg_RoomOperate_C2S::kRoomUserNumberFieldNumber;
const int Msg_RoomOperate_C2S::kRoomPatternFieldNumber;
const int Msg_RoomOperate_C2S::kMapFieldNumber;
#endif  // !_MSC_VER

Msg_RoomOperate_C2S::Msg_RoomOperate_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_RoomOperate_C2S::InitAsDefaultInstance() {
}

Msg_RoomOperate_C2S::Msg_RoomOperate_C2S(const Msg_RoomOperate_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_RoomOperate_C2S::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  operatetype_ = 0;
  roomid_ = 0u;
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomusernumber_ = 0u;
  roompattern_ = 0;
  map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_RoomOperate_C2S::~Msg_RoomOperate_C2S() {
  SharedDtor();
}

void Msg_RoomOperate_C2S::SharedDtor() {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomname_;
  }
  if (map_ != &::google::protobuf::internal::kEmptyString) {
    delete map_;
  }
  if (this != default_instance_) {
  }
}

void Msg_RoomOperate_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_RoomOperate_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_RoomOperate_C2S_descriptor_;
}

const Msg_RoomOperate_C2S& Msg_RoomOperate_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_RoomOperate_C2S* Msg_RoomOperate_C2S::default_instance_ = NULL;

Msg_RoomOperate_C2S* Msg_RoomOperate_C2S::New() const {
  return new Msg_RoomOperate_C2S;
}

void Msg_RoomOperate_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    operatetype_ = 0;
    roomid_ = 0u;
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::kEmptyString) {
        roomname_->clear();
      }
    }
    roomusernumber_ = 0u;
    roompattern_ = 0;
    if (has_map()) {
      if (map_ != &::google::protobuf::internal::kEmptyString) {
        map_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_RoomOperate_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operateType;
        break;
      }

      // required .RoomOperateType operateType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operateType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RoomOperateType_IsValid(value)) {
            set_operatetype(static_cast< ::RoomOperateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_roomID;
        break;
      }

      // optional fixed32 roomID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_roomName;
        break;
      }

      // optional string roomName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_roomUserNumber;
        break;
      }

      // optional fixed32 roomUserNumber = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roomUserNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &roomusernumber_)));
          set_has_roomusernumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roomPattern;
        break;
      }

      // optional .GamePattern roomPattern = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomPattern:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GamePattern_IsValid(value)) {
            set_roompattern(static_cast< ::GamePattern >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Map;
        break;
      }

      // optional string Map = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->map().data(), this->map().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_RoomOperate_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // required .RoomOperateType operateType = 2;
  if (has_operatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->operatetype(), output);
  }

  // optional fixed32 roomID = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->roomid(), output);
  }

  // optional string roomName = 4;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->roomname(), output);
  }

  // optional fixed32 roomUserNumber = 5;
  if (has_roomusernumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->roomusernumber(), output);
  }

  // optional .GamePattern roomPattern = 6;
  if (has_roompattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->roompattern(), output);
  }

  // optional string Map = 7;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_RoomOperate_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // required .RoomOperateType operateType = 2;
  if (has_operatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->operatetype(), target);
  }

  // optional fixed32 roomID = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->roomid(), target);
  }

  // optional string roomName = 4;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->roomname(), target);
  }

  // optional fixed32 roomUserNumber = 5;
  if (has_roomusernumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->roomusernumber(), target);
  }

  // optional .GamePattern roomPattern = 6;
  if (has_roompattern()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->roompattern(), target);
  }

  // optional string Map = 7;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_RoomOperate_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 ID = 1;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // required .RoomOperateType operateType = 2;
    if (has_operatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operatetype());
    }

    // optional fixed32 roomID = 3;
    if (has_roomid()) {
      total_size += 1 + 4;
    }

    // optional string roomName = 4;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // optional fixed32 roomUserNumber = 5;
    if (has_roomusernumber()) {
      total_size += 1 + 4;
    }

    // optional .GamePattern roomPattern = 6;
    if (has_roompattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roompattern());
    }

    // optional string Map = 7;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_RoomOperate_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_RoomOperate_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_RoomOperate_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_RoomOperate_C2S::MergeFrom(const Msg_RoomOperate_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_operatetype()) {
      set_operatetype(from.operatetype());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_roomusernumber()) {
      set_roomusernumber(from.roomusernumber());
    }
    if (from.has_roompattern()) {
      set_roompattern(from.roompattern());
    }
    if (from.has_map()) {
      set_map(from.map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_RoomOperate_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_RoomOperate_C2S::CopyFrom(const Msg_RoomOperate_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_RoomOperate_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Msg_RoomOperate_C2S::Swap(Msg_RoomOperate_C2S* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(operatetype_, other->operatetype_);
    std::swap(roomid_, other->roomid_);
    std::swap(roomname_, other->roomname_);
    std::swap(roomusernumber_, other->roomusernumber_);
    std::swap(roompattern_, other->roompattern_);
    std::swap(map_, other->map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_RoomOperate_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_RoomOperate_C2S_descriptor_;
  metadata.reflection = Msg_RoomOperate_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_RoomOperate_S2C::kIDFieldNumber;
const int Msg_RoomOperate_S2C::kOperateTypeFieldNumber;
const int Msg_RoomOperate_S2C::kRoomIDFieldNumber;
const int Msg_RoomOperate_S2C::kSuccessFieldNumber;
const int Msg_RoomOperate_S2C::kRoomNameFieldNumber;
const int Msg_RoomOperate_S2C::kRoomUserNumberFieldNumber;
const int Msg_RoomOperate_S2C::kRoomPatternFieldNumber;
const int Msg_RoomOperate_S2C::kPlayersFieldNumber;
const int Msg_RoomOperate_S2C::kMapFieldNumber;
#endif  // !_MSC_VER

Msg_RoomOperate_S2C::Msg_RoomOperate_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_RoomOperate_S2C::InitAsDefaultInstance() {
}

Msg_RoomOperate_S2C::Msg_RoomOperate_S2C(const Msg_RoomOperate_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_RoomOperate_S2C::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  operatetype_ = 0;
  roomid_ = 0u;
  success_ = false;
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomusernumber_ = 0u;
  roompattern_ = 0;
  map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_RoomOperate_S2C::~Msg_RoomOperate_S2C() {
  SharedDtor();
}

void Msg_RoomOperate_S2C::SharedDtor() {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomname_;
  }
  if (map_ != &::google::protobuf::internal::kEmptyString) {
    delete map_;
  }
  if (this != default_instance_) {
  }
}

void Msg_RoomOperate_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_RoomOperate_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_RoomOperate_S2C_descriptor_;
}

const Msg_RoomOperate_S2C& Msg_RoomOperate_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_RoomOperate_S2C* Msg_RoomOperate_S2C::default_instance_ = NULL;

Msg_RoomOperate_S2C* Msg_RoomOperate_S2C::New() const {
  return new Msg_RoomOperate_S2C;
}

void Msg_RoomOperate_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    operatetype_ = 0;
    roomid_ = 0u;
    success_ = false;
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::kEmptyString) {
        roomname_->clear();
      }
    }
    roomusernumber_ = 0u;
    roompattern_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_map()) {
      if (map_ != &::google::protobuf::internal::kEmptyString) {
        map_->clear();
      }
    }
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_RoomOperate_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operateType;
        break;
      }

      // required .RoomOperateType operateType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operateType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RoomOperateType_IsValid(value)) {
            set_operatetype(static_cast< ::RoomOperateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_roomID;
        break;
      }

      // required fixed32 roomID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // required bool success = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roomName;
        break;
      }

      // optional string roomName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_roomUserNumber;
        break;
      }

      // optional fixed32 roomUserNumber = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roomUserNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &roomusernumber_)));
          set_has_roomusernumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_roomPattern;
        break;
      }

      // optional .GamePattern roomPattern = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomPattern:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GamePattern_IsValid(value)) {
            set_roompattern(static_cast< ::GamePattern >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_players;
        break;
      }

      // repeated .protoaccount players = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_players;
        if (input->ExpectTag(74)) goto parse_Map;
        break;
      }

      // optional string Map = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->map().data(), this->map().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_RoomOperate_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // required .RoomOperateType operateType = 2;
  if (has_operatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->operatetype(), output);
  }

  // required fixed32 roomID = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->roomid(), output);
  }

  // required bool success = 4;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  // optional string roomName = 5;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->roomname(), output);
  }

  // optional fixed32 roomUserNumber = 6;
  if (has_roomusernumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->roomusernumber(), output);
  }

  // optional .GamePattern roomPattern = 7;
  if (has_roompattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->roompattern(), output);
  }

  // repeated .protoaccount players = 8;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->players(i), output);
  }

  // optional string Map = 9;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_RoomOperate_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // required .RoomOperateType operateType = 2;
  if (has_operatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->operatetype(), target);
  }

  // required fixed32 roomID = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->roomid(), target);
  }

  // required bool success = 4;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  // optional string roomName = 5;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->roomname(), target);
  }

  // optional fixed32 roomUserNumber = 6;
  if (has_roomusernumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->roomusernumber(), target);
  }

  // optional .GamePattern roomPattern = 7;
  if (has_roompattern()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->roompattern(), target);
  }

  // repeated .protoaccount players = 8;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->players(i), target);
  }

  // optional string Map = 9;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_RoomOperate_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 ID = 1;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // required .RoomOperateType operateType = 2;
    if (has_operatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operatetype());
    }

    // required fixed32 roomID = 3;
    if (has_roomid()) {
      total_size += 1 + 4;
    }

    // required bool success = 4;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional string roomName = 5;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // optional fixed32 roomUserNumber = 6;
    if (has_roomusernumber()) {
      total_size += 1 + 4;
    }

    // optional .GamePattern roomPattern = 7;
    if (has_roompattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roompattern());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string Map = 9;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

  }
  // repeated .protoaccount players = 8;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_RoomOperate_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_RoomOperate_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_RoomOperate_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_RoomOperate_S2C::MergeFrom(const Msg_RoomOperate_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_operatetype()) {
      set_operatetype(from.operatetype());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_roomusernumber()) {
      set_roomusernumber(from.roomusernumber());
    }
    if (from.has_roompattern()) {
      set_roompattern(from.roompattern());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_map()) {
      set_map(from.map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_RoomOperate_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_RoomOperate_S2C::CopyFrom(const Msg_RoomOperate_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_RoomOperate_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Msg_RoomOperate_S2C::Swap(Msg_RoomOperate_S2C* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(operatetype_, other->operatetype_);
    std::swap(roomid_, other->roomid_);
    std::swap(success_, other->success_);
    std::swap(roomname_, other->roomname_);
    std::swap(roomusernumber_, other->roomusernumber_);
    std::swap(roompattern_, other->roompattern_);
    players_.Swap(&other->players_);
    std::swap(map_, other->map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_RoomOperate_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_RoomOperate_S2C_descriptor_;
  metadata.reflection = Msg_RoomOperate_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_StartBattle_C2S::kSzNameFieldNumber;
const int Msg_StartBattle_C2S::kIDFieldNumber;
const int Msg_StartBattle_C2S::kID2FieldNumber;
const int Msg_StartBattle_C2S::kRoomIDFieldNumber;
const int Msg_StartBattle_C2S::kPatternFieldNumber;
#endif  // !_MSC_VER

Msg_StartBattle_C2S::Msg_StartBattle_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_StartBattle_C2S::InitAsDefaultInstance() {
}

Msg_StartBattle_C2S::Msg_StartBattle_C2S(const Msg_StartBattle_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_StartBattle_C2S::SharedCtor() {
  _cached_size_ = 0;
  szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0u;
  id2_ = 0u;
  roomid_ = 0u;
  pattern_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_StartBattle_C2S::~Msg_StartBattle_C2S() {
  SharedDtor();
}

void Msg_StartBattle_C2S::SharedDtor() {
  if (szname_ != &::google::protobuf::internal::kEmptyString) {
    delete szname_;
  }
  if (this != default_instance_) {
  }
}

void Msg_StartBattle_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_StartBattle_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_StartBattle_C2S_descriptor_;
}

const Msg_StartBattle_C2S& Msg_StartBattle_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_StartBattle_C2S* Msg_StartBattle_C2S::default_instance_ = NULL;

Msg_StartBattle_C2S* Msg_StartBattle_C2S::New() const {
  return new Msg_StartBattle_C2S;
}

void Msg_StartBattle_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_szname()) {
      if (szname_ != &::google::protobuf::internal::kEmptyString) {
        szname_->clear();
      }
    }
    id_ = 0u;
    id2_ = 0u;
    roomid_ = 0u;
    pattern_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_StartBattle_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string szName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szname().data(), this->szname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_ID;
        break;
      }

      // required fixed32 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_ID2;
        break;
      }

      // required fixed32 ID2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ID2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id2_)));
          set_has_id2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_roomID;
        break;
      }

      // required fixed32 roomID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pattern;
        break;
      }

      // required .GamePattern pattern = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pattern:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GamePattern_IsValid(value)) {
            set_pattern(static_cast< ::GamePattern >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_StartBattle_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string szName = 1;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->szname(), output);
  }

  // required fixed32 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->id(), output);
  }

  // required fixed32 ID2 = 3;
  if (has_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->id2(), output);
  }

  // required fixed32 roomID = 4;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->roomid(), output);
  }

  // required .GamePattern pattern = 5;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->pattern(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_StartBattle_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string szName = 1;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->szname(), target);
  }

  // required fixed32 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->id(), target);
  }

  // required fixed32 ID2 = 3;
  if (has_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->id2(), target);
  }

  // required fixed32 roomID = 4;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->roomid(), target);
  }

  // required .GamePattern pattern = 5;
  if (has_pattern()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->pattern(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_StartBattle_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string szName = 1;
    if (has_szname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szname());
    }

    // required fixed32 ID = 2;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // required fixed32 ID2 = 3;
    if (has_id2()) {
      total_size += 1 + 4;
    }

    // required fixed32 roomID = 4;
    if (has_roomid()) {
      total_size += 1 + 4;
    }

    // required .GamePattern pattern = 5;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pattern());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_StartBattle_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_StartBattle_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_StartBattle_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_StartBattle_C2S::MergeFrom(const Msg_StartBattle_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szname()) {
      set_szname(from.szname());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_id2()) {
      set_id2(from.id2());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_StartBattle_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_StartBattle_C2S::CopyFrom(const Msg_StartBattle_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_StartBattle_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Msg_StartBattle_C2S::Swap(Msg_StartBattle_C2S* other) {
  if (other != this) {
    std::swap(szname_, other->szname_);
    std::swap(id_, other->id_);
    std::swap(id2_, other->id2_);
    std::swap(roomid_, other->roomid_);
    std::swap(pattern_, other->pattern_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_StartBattle_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_StartBattle_C2S_descriptor_;
  metadata.reflection = Msg_StartBattle_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_StartBattle_S2C::kSzNameFieldNumber;
const int Msg_StartBattle_S2C::kIDFieldNumber;
const int Msg_StartBattle_S2C::kID2FieldNumber;
const int Msg_StartBattle_S2C::kRoomIDFieldNumber;
const int Msg_StartBattle_S2C::kPatternFieldNumber;
const int Msg_StartBattle_S2C::kBattleIdFieldNumber;
#endif  // !_MSC_VER

Msg_StartBattle_S2C::Msg_StartBattle_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_StartBattle_S2C::InitAsDefaultInstance() {
}

Msg_StartBattle_S2C::Msg_StartBattle_S2C(const Msg_StartBattle_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_StartBattle_S2C::SharedCtor() {
  _cached_size_ = 0;
  szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0u;
  id2_ = 0u;
  roomid_ = 0u;
  pattern_ = 0;
  battleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_StartBattle_S2C::~Msg_StartBattle_S2C() {
  SharedDtor();
}

void Msg_StartBattle_S2C::SharedDtor() {
  if (szname_ != &::google::protobuf::internal::kEmptyString) {
    delete szname_;
  }
  if (this != default_instance_) {
  }
}

void Msg_StartBattle_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_StartBattle_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_StartBattle_S2C_descriptor_;
}

const Msg_StartBattle_S2C& Msg_StartBattle_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_StartBattle_S2C* Msg_StartBattle_S2C::default_instance_ = NULL;

Msg_StartBattle_S2C* Msg_StartBattle_S2C::New() const {
  return new Msg_StartBattle_S2C;
}

void Msg_StartBattle_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_szname()) {
      if (szname_ != &::google::protobuf::internal::kEmptyString) {
        szname_->clear();
      }
    }
    id_ = 0u;
    id2_ = 0u;
    roomid_ = 0u;
    pattern_ = 0;
    battleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_StartBattle_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string szName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szname().data(), this->szname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_ID;
        break;
      }

      // required fixed32 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_ID2;
        break;
      }

      // required fixed32 ID2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ID2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id2_)));
          set_has_id2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_roomID;
        break;
      }

      // required fixed32 roomID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pattern;
        break;
      }

      // required .GamePattern pattern = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pattern:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GamePattern_IsValid(value)) {
            set_pattern(static_cast< ::GamePattern >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_BattleId;
        break;
      }

      // required fixed32 BattleId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BattleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_StartBattle_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string szName = 1;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->szname(), output);
  }

  // required fixed32 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->id(), output);
  }

  // required fixed32 ID2 = 3;
  if (has_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->id2(), output);
  }

  // required fixed32 roomID = 4;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->roomid(), output);
  }

  // required .GamePattern pattern = 5;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->pattern(), output);
  }

  // required fixed32 BattleId = 6;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->battleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_StartBattle_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string szName = 1;
  if (has_szname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szname().data(), this->szname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->szname(), target);
  }

  // required fixed32 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->id(), target);
  }

  // required fixed32 ID2 = 3;
  if (has_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->id2(), target);
  }

  // required fixed32 roomID = 4;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->roomid(), target);
  }

  // required .GamePattern pattern = 5;
  if (has_pattern()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->pattern(), target);
  }

  // required fixed32 BattleId = 6;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->battleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_StartBattle_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string szName = 1;
    if (has_szname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szname());
    }

    // required fixed32 ID = 2;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // required fixed32 ID2 = 3;
    if (has_id2()) {
      total_size += 1 + 4;
    }

    // required fixed32 roomID = 4;
    if (has_roomid()) {
      total_size += 1 + 4;
    }

    // required .GamePattern pattern = 5;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pattern());
    }

    // required fixed32 BattleId = 6;
    if (has_battleid()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_StartBattle_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_StartBattle_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_StartBattle_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_StartBattle_S2C::MergeFrom(const Msg_StartBattle_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szname()) {
      set_szname(from.szname());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_id2()) {
      set_id2(from.id2());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_StartBattle_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_StartBattle_S2C::CopyFrom(const Msg_StartBattle_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_StartBattle_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Msg_StartBattle_S2C::Swap(Msg_StartBattle_S2C* other) {
  if (other != this) {
    std::swap(szname_, other->szname_);
    std::swap(id_, other->id_);
    std::swap(id2_, other->id2_);
    std::swap(roomid_, other->roomid_);
    std::swap(pattern_, other->pattern_);
    std::swap(battleid_, other->battleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_StartBattle_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_StartBattle_S2C_descriptor_;
  metadata.reflection = Msg_StartBattle_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_OriginHandCards_S2C::kPlayeridFieldNumber;
const int Msg_OriginHandCards_S2C::kCardsFieldNumber;
#endif  // !_MSC_VER

Msg_OriginHandCards_S2C::Msg_OriginHandCards_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_OriginHandCards_S2C::InitAsDefaultInstance() {
}

Msg_OriginHandCards_S2C::Msg_OriginHandCards_S2C(const Msg_OriginHandCards_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_OriginHandCards_S2C::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_OriginHandCards_S2C::~Msg_OriginHandCards_S2C() {
  SharedDtor();
}

void Msg_OriginHandCards_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_OriginHandCards_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_OriginHandCards_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_OriginHandCards_S2C_descriptor_;
}

const Msg_OriginHandCards_S2C& Msg_OriginHandCards_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_OriginHandCards_S2C* Msg_OriginHandCards_S2C::default_instance_ = NULL;

Msg_OriginHandCards_S2C* Msg_OriginHandCards_S2C::New() const {
  return new Msg_OriginHandCards_S2C;
}

void Msg_OriginHandCards_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_OriginHandCards_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cards;
        break;
      }

      // repeated .protocard cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_OriginHandCards_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->playerid(), output);
  }

  // repeated .protocard cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_OriginHandCards_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->playerid(), target);
  }

  // repeated .protocard cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_OriginHandCards_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 + 4;
    }

  }
  // repeated .protocard cards = 2;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_OriginHandCards_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_OriginHandCards_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_OriginHandCards_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_OriginHandCards_S2C::MergeFrom(const Msg_OriginHandCards_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_OriginHandCards_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_OriginHandCards_S2C::CopyFrom(const Msg_OriginHandCards_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_OriginHandCards_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < cards_size(); i++) {
    if (!this->cards(i).IsInitialized()) return false;
  }
  return true;
}

void Msg_OriginHandCards_S2C::Swap(Msg_OriginHandCards_S2C* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_OriginHandCards_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_OriginHandCards_S2C_descriptor_;
  metadata.reflection = Msg_OriginHandCards_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_GameUpdate_C2S::kBattleIdFieldNumber;
const int Msg_GameUpdate_C2S::kRoundFieldNumber;
const int Msg_GameUpdate_C2S::kUseCardFieldNumber;
const int Msg_GameUpdate_C2S::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

Msg_GameUpdate_C2S::Msg_GameUpdate_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_GameUpdate_C2S::InitAsDefaultInstance() {
  usecard_ = const_cast< ::protocard*>(&::protocard::default_instance());
}

Msg_GameUpdate_C2S::Msg_GameUpdate_C2S(const Msg_GameUpdate_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_GameUpdate_C2S::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  round_ = 0u;
  usecard_ = NULL;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_GameUpdate_C2S::~Msg_GameUpdate_C2S() {
  SharedDtor();
}

void Msg_GameUpdate_C2S::SharedDtor() {
  if (this != default_instance_) {
    delete usecard_;
  }
}

void Msg_GameUpdate_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_GameUpdate_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_GameUpdate_C2S_descriptor_;
}

const Msg_GameUpdate_C2S& Msg_GameUpdate_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_GameUpdate_C2S* Msg_GameUpdate_C2S::default_instance_ = NULL;

Msg_GameUpdate_C2S* Msg_GameUpdate_C2S::New() const {
  return new Msg_GameUpdate_C2S;
}

void Msg_GameUpdate_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    round_ = 0u;
    if (has_usecard()) {
      if (usecard_ != NULL) usecard_->::protocard::Clear();
    }
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_GameUpdate_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 BattleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Round;
        break;
      }

      // required fixed32 Round = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_useCard;
        break;
      }

      // required .protocard useCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usecard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_playerID;
        break;
      }

      // required fixed32 playerID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_GameUpdate_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 BattleId = 1;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->battleid(), output);
  }

  // required fixed32 Round = 2;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->round(), output);
  }

  // required .protocard useCard = 3;
  if (has_usecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->usecard(), output);
  }

  // required fixed32 playerID = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_GameUpdate_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 BattleId = 1;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->battleid(), target);
  }

  // required fixed32 Round = 2;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->round(), target);
  }

  // required .protocard useCard = 3;
  if (has_usecard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->usecard(), target);
  }

  // required fixed32 playerID = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_GameUpdate_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 BattleId = 1;
    if (has_battleid()) {
      total_size += 1 + 4;
    }

    // required fixed32 Round = 2;
    if (has_round()) {
      total_size += 1 + 4;
    }

    // required .protocard useCard = 3;
    if (has_usecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usecard());
    }

    // required fixed32 playerID = 4;
    if (has_playerid()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_GameUpdate_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_GameUpdate_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_GameUpdate_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_GameUpdate_C2S::MergeFrom(const Msg_GameUpdate_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_usecard()) {
      mutable_usecard()->::protocard::MergeFrom(from.usecard());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_GameUpdate_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_GameUpdate_C2S::CopyFrom(const Msg_GameUpdate_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GameUpdate_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_usecard()) {
    if (!this->usecard().IsInitialized()) return false;
  }
  return true;
}

void Msg_GameUpdate_C2S::Swap(Msg_GameUpdate_C2S* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(round_, other->round_);
    std::swap(usecard_, other->usecard_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_GameUpdate_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_GameUpdate_C2S_descriptor_;
  metadata.reflection = Msg_GameUpdate_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_GameUpdate_S2C::kBattleIdFieldNumber;
const int Msg_GameUpdate_S2C::kPlayer1HpFieldNumber;
const int Msg_GameUpdate_S2C::kPlayer2HpFieldNumber;
const int Msg_GameUpdate_S2C::kPlayer1UsecardFieldNumber;
const int Msg_GameUpdate_S2C::kPlayer2UsecardFieldNumber;
const int Msg_GameUpdate_S2C::kPlayer1GotCardFieldNumber;
const int Msg_GameUpdate_S2C::kPlayer2GotCardFieldNumber;
#endif  // !_MSC_VER

Msg_GameUpdate_S2C::Msg_GameUpdate_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_GameUpdate_S2C::InitAsDefaultInstance() {
  player1_usecard_ = const_cast< ::protocard*>(&::protocard::default_instance());
  player2_usecard_ = const_cast< ::protocard*>(&::protocard::default_instance());
  player1_gotcard_ = const_cast< ::protocard*>(&::protocard::default_instance());
  player2_gotcard_ = const_cast< ::protocard*>(&::protocard::default_instance());
}

Msg_GameUpdate_S2C::Msg_GameUpdate_S2C(const Msg_GameUpdate_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_GameUpdate_S2C::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  player1_hp_ = 0u;
  player2_hp_ = 0u;
  player1_usecard_ = NULL;
  player2_usecard_ = NULL;
  player1_gotcard_ = NULL;
  player2_gotcard_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_GameUpdate_S2C::~Msg_GameUpdate_S2C() {
  SharedDtor();
}

void Msg_GameUpdate_S2C::SharedDtor() {
  if (this != default_instance_) {
    delete player1_usecard_;
    delete player2_usecard_;
    delete player1_gotcard_;
    delete player2_gotcard_;
  }
}

void Msg_GameUpdate_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_GameUpdate_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_GameUpdate_S2C_descriptor_;
}

const Msg_GameUpdate_S2C& Msg_GameUpdate_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_GameUpdate_S2C* Msg_GameUpdate_S2C::default_instance_ = NULL;

Msg_GameUpdate_S2C* Msg_GameUpdate_S2C::New() const {
  return new Msg_GameUpdate_S2C;
}

void Msg_GameUpdate_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    player1_hp_ = 0u;
    player2_hp_ = 0u;
    if (has_player1_usecard()) {
      if (player1_usecard_ != NULL) player1_usecard_->::protocard::Clear();
    }
    if (has_player2_usecard()) {
      if (player2_usecard_ != NULL) player2_usecard_->::protocard::Clear();
    }
    if (has_player1_gotcard()) {
      if (player1_gotcard_ != NULL) player1_gotcard_->::protocard::Clear();
    }
    if (has_player2_gotcard()) {
      if (player2_gotcard_ != NULL) player2_gotcard_->::protocard::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_GameUpdate_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 BattleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_player1_hp;
        break;
      }

      // required fixed32 player1_hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_player1_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &player1_hp_)));
          set_has_player1_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_player2_hp;
        break;
      }

      // required fixed32 player2_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_player2_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &player2_hp_)));
          set_has_player2_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player1_usecard;
        break;
      }

      // required .protocard player1_usecard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player1_usecard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player1_usecard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_player2_usecard;
        break;
      }

      // required .protocard player2_usecard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player2_usecard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player2_usecard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_player1_gotCard;
        break;
      }

      // optional .protocard player1_gotCard = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player1_gotCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player1_gotcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_player2_gotCard;
        break;
      }

      // optional .protocard player2_gotCard = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player2_gotCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player2_gotcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_GameUpdate_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 BattleId = 1;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->battleid(), output);
  }

  // required fixed32 player1_hp = 2;
  if (has_player1_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->player1_hp(), output);
  }

  // required fixed32 player2_hp = 3;
  if (has_player2_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->player2_hp(), output);
  }

  // required .protocard player1_usecard = 4;
  if (has_player1_usecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player1_usecard(), output);
  }

  // required .protocard player2_usecard = 5;
  if (has_player2_usecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->player2_usecard(), output);
  }

  // optional .protocard player1_gotCard = 6;
  if (has_player1_gotcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->player1_gotcard(), output);
  }

  // optional .protocard player2_gotCard = 7;
  if (has_player2_gotcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->player2_gotcard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_GameUpdate_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 BattleId = 1;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->battleid(), target);
  }

  // required fixed32 player1_hp = 2;
  if (has_player1_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->player1_hp(), target);
  }

  // required fixed32 player2_hp = 3;
  if (has_player2_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->player2_hp(), target);
  }

  // required .protocard player1_usecard = 4;
  if (has_player1_usecard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player1_usecard(), target);
  }

  // required .protocard player2_usecard = 5;
  if (has_player2_usecard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->player2_usecard(), target);
  }

  // optional .protocard player1_gotCard = 6;
  if (has_player1_gotcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->player1_gotcard(), target);
  }

  // optional .protocard player2_gotCard = 7;
  if (has_player2_gotcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->player2_gotcard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_GameUpdate_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 BattleId = 1;
    if (has_battleid()) {
      total_size += 1 + 4;
    }

    // required fixed32 player1_hp = 2;
    if (has_player1_hp()) {
      total_size += 1 + 4;
    }

    // required fixed32 player2_hp = 3;
    if (has_player2_hp()) {
      total_size += 1 + 4;
    }

    // required .protocard player1_usecard = 4;
    if (has_player1_usecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player1_usecard());
    }

    // required .protocard player2_usecard = 5;
    if (has_player2_usecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player2_usecard());
    }

    // optional .protocard player1_gotCard = 6;
    if (has_player1_gotcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player1_gotcard());
    }

    // optional .protocard player2_gotCard = 7;
    if (has_player2_gotcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player2_gotcard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_GameUpdate_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_GameUpdate_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_GameUpdate_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_GameUpdate_S2C::MergeFrom(const Msg_GameUpdate_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_player1_hp()) {
      set_player1_hp(from.player1_hp());
    }
    if (from.has_player2_hp()) {
      set_player2_hp(from.player2_hp());
    }
    if (from.has_player1_usecard()) {
      mutable_player1_usecard()->::protocard::MergeFrom(from.player1_usecard());
    }
    if (from.has_player2_usecard()) {
      mutable_player2_usecard()->::protocard::MergeFrom(from.player2_usecard());
    }
    if (from.has_player1_gotcard()) {
      mutable_player1_gotcard()->::protocard::MergeFrom(from.player1_gotcard());
    }
    if (from.has_player2_gotcard()) {
      mutable_player2_gotcard()->::protocard::MergeFrom(from.player2_gotcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_GameUpdate_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_GameUpdate_S2C::CopyFrom(const Msg_GameUpdate_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GameUpdate_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_player1_usecard()) {
    if (!this->player1_usecard().IsInitialized()) return false;
  }
  if (has_player2_usecard()) {
    if (!this->player2_usecard().IsInitialized()) return false;
  }
  if (has_player1_gotcard()) {
    if (!this->player1_gotcard().IsInitialized()) return false;
  }
  if (has_player2_gotcard()) {
    if (!this->player2_gotcard().IsInitialized()) return false;
  }
  return true;
}

void Msg_GameUpdate_S2C::Swap(Msg_GameUpdate_S2C* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(player1_hp_, other->player1_hp_);
    std::swap(player2_hp_, other->player2_hp_);
    std::swap(player1_usecard_, other->player1_usecard_);
    std::swap(player2_usecard_, other->player2_usecard_);
    std::swap(player1_gotcard_, other->player1_gotcard_);
    std::swap(player2_gotcard_, other->player2_gotcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_GameUpdate_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_GameUpdate_S2C_descriptor_;
  metadata.reflection = Msg_GameUpdate_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_Surrender_C2S::kIDFieldNumber;
const int Msg_Surrender_C2S::kBattleIdFieldNumber;
#endif  // !_MSC_VER

Msg_Surrender_C2S::Msg_Surrender_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_Surrender_C2S::InitAsDefaultInstance() {
}

Msg_Surrender_C2S::Msg_Surrender_C2S(const Msg_Surrender_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_Surrender_C2S::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  battleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_Surrender_C2S::~Msg_Surrender_C2S() {
  SharedDtor();
}

void Msg_Surrender_C2S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_Surrender_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_Surrender_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_Surrender_C2S_descriptor_;
}

const Msg_Surrender_C2S& Msg_Surrender_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_Surrender_C2S* Msg_Surrender_C2S::default_instance_ = NULL;

Msg_Surrender_C2S* Msg_Surrender_C2S::New() const {
  return new Msg_Surrender_C2S;
}

void Msg_Surrender_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    battleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_Surrender_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_BattleId;
        break;
      }

      // required fixed32 BattleId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BattleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_Surrender_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // required fixed32 BattleId = 2;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->battleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_Surrender_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // required fixed32 BattleId = 2;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->battleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_Surrender_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 ID = 1;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // required fixed32 BattleId = 2;
    if (has_battleid()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_Surrender_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_Surrender_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_Surrender_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_Surrender_C2S::MergeFrom(const Msg_Surrender_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_Surrender_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_Surrender_C2S::CopyFrom(const Msg_Surrender_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Surrender_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Msg_Surrender_C2S::Swap(Msg_Surrender_C2S* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(battleid_, other->battleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_Surrender_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_Surrender_C2S_descriptor_;
  metadata.reflection = Msg_Surrender_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_Gameover_S2C::kBattleIdFieldNumber;
const int Msg_Gameover_S2C::kPlayer1IdFieldNumber;
const int Msg_Gameover_S2C::kPlayer2IdFieldNumber;
const int Msg_Gameover_S2C::kPlayer1VictoryFieldNumber;
const int Msg_Gameover_S2C::kPlayer2VictoryFieldNumber;
#endif  // !_MSC_VER

Msg_Gameover_S2C::Msg_Gameover_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_Gameover_S2C::InitAsDefaultInstance() {
}

Msg_Gameover_S2C::Msg_Gameover_S2C(const Msg_Gameover_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_Gameover_S2C::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  player1_id_ = 0u;
  player2_id_ = 0u;
  player1_victory_ = false;
  player2_victory_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_Gameover_S2C::~Msg_Gameover_S2C() {
  SharedDtor();
}

void Msg_Gameover_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_Gameover_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_Gameover_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_Gameover_S2C_descriptor_;
}

const Msg_Gameover_S2C& Msg_Gameover_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_Gameover_S2C* Msg_Gameover_S2C::default_instance_ = NULL;

Msg_Gameover_S2C* Msg_Gameover_S2C::New() const {
  return new Msg_Gameover_S2C;
}

void Msg_Gameover_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    player1_id_ = 0u;
    player2_id_ = 0u;
    player1_victory_ = false;
    player2_victory_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_Gameover_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 BattleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_player1_id;
        break;
      }

      // required fixed32 player1_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_player1_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &player1_id_)));
          set_has_player1_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_player2_id;
        break;
      }

      // required fixed32 player2_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_player2_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &player2_id_)));
          set_has_player2_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_player1_victory;
        break;
      }

      // required bool player1_victory = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player1_victory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &player1_victory_)));
          set_has_player1_victory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_player2_victory;
        break;
      }

      // required bool player2_victory = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player2_victory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &player2_victory_)));
          set_has_player2_victory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_Gameover_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 BattleId = 1;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->battleid(), output);
  }

  // required fixed32 player1_id = 2;
  if (has_player1_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->player1_id(), output);
  }

  // required fixed32 player2_id = 3;
  if (has_player2_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->player2_id(), output);
  }

  // required bool player1_victory = 4;
  if (has_player1_victory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->player1_victory(), output);
  }

  // required bool player2_victory = 5;
  if (has_player2_victory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->player2_victory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_Gameover_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 BattleId = 1;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->battleid(), target);
  }

  // required fixed32 player1_id = 2;
  if (has_player1_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->player1_id(), target);
  }

  // required fixed32 player2_id = 3;
  if (has_player2_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->player2_id(), target);
  }

  // required bool player1_victory = 4;
  if (has_player1_victory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->player1_victory(), target);
  }

  // required bool player2_victory = 5;
  if (has_player2_victory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->player2_victory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_Gameover_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 BattleId = 1;
    if (has_battleid()) {
      total_size += 1 + 4;
    }

    // required fixed32 player1_id = 2;
    if (has_player1_id()) {
      total_size += 1 + 4;
    }

    // required fixed32 player2_id = 3;
    if (has_player2_id()) {
      total_size += 1 + 4;
    }

    // required bool player1_victory = 4;
    if (has_player1_victory()) {
      total_size += 1 + 1;
    }

    // required bool player2_victory = 5;
    if (has_player2_victory()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_Gameover_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_Gameover_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_Gameover_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_Gameover_S2C::MergeFrom(const Msg_Gameover_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_player1_id()) {
      set_player1_id(from.player1_id());
    }
    if (from.has_player2_id()) {
      set_player2_id(from.player2_id());
    }
    if (from.has_player1_victory()) {
      set_player1_victory(from.player1_victory());
    }
    if (from.has_player2_victory()) {
      set_player2_victory(from.player2_victory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_Gameover_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_Gameover_S2C::CopyFrom(const Msg_Gameover_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Gameover_S2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Msg_Gameover_S2C::Swap(Msg_Gameover_S2C* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(player1_id_, other->player1_id_);
    std::swap(player2_id_, other->player2_id_);
    std::swap(player1_victory_, other->player1_victory_);
    std::swap(player2_victory_, other->player2_victory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_Gameover_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_Gameover_S2C_descriptor_;
  metadata.reflection = Msg_Gameover_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_RoomList_S2C::kRoomsFieldNumber;
#endif  // !_MSC_VER

Msg_RoomList_S2C::Msg_RoomList_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_RoomList_S2C::InitAsDefaultInstance() {
}

Msg_RoomList_S2C::Msg_RoomList_S2C(const Msg_RoomList_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_RoomList_S2C::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_RoomList_S2C::~Msg_RoomList_S2C() {
  SharedDtor();
}

void Msg_RoomList_S2C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_RoomList_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_RoomList_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_RoomList_S2C_descriptor_;
}

const Msg_RoomList_S2C& Msg_RoomList_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_RoomList_S2C* Msg_RoomList_S2C::default_instance_ = NULL;

Msg_RoomList_S2C* Msg_RoomList_S2C::New() const {
  return new Msg_RoomList_S2C;
}

void Msg_RoomList_S2C::Clear() {
  rooms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_RoomList_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protoRoom rooms = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rooms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rooms;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_RoomList_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protoRoom rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rooms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_RoomList_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protoRoom rooms = 1;
  for (int i = 0; i < this->rooms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rooms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_RoomList_S2C::ByteSize() const {
  int total_size = 0;

  // repeated .protoRoom rooms = 1;
  total_size += 1 * this->rooms_size();
  for (int i = 0; i < this->rooms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rooms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_RoomList_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_RoomList_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_RoomList_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_RoomList_S2C::MergeFrom(const Msg_RoomList_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  rooms_.MergeFrom(from.rooms_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_RoomList_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_RoomList_S2C::CopyFrom(const Msg_RoomList_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_RoomList_S2C::IsInitialized() const {

  for (int i = 0; i < rooms_size(); i++) {
    if (!this->rooms(i).IsInitialized()) return false;
  }
  return true;
}

void Msg_RoomList_S2C::Swap(Msg_RoomList_S2C* other) {
  if (other != this) {
    rooms_.Swap(&other->rooms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_RoomList_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_RoomList_S2C_descriptor_;
  metadata.reflection = Msg_RoomList_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_AccountMsg_C2S::kRequestidFieldNumber;
const int Msg_AccountMsg_C2S::kGetFieldNumber;
const int Msg_AccountMsg_C2S::kHeadImgFieldNumber;
#endif  // !_MSC_VER

Msg_AccountMsg_C2S::Msg_AccountMsg_C2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_AccountMsg_C2S::InitAsDefaultInstance() {
}

Msg_AccountMsg_C2S::Msg_AccountMsg_C2S(const Msg_AccountMsg_C2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_AccountMsg_C2S::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0u;
  get_ = false;
  headimg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_AccountMsg_C2S::~Msg_AccountMsg_C2S() {
  SharedDtor();
}

void Msg_AccountMsg_C2S::SharedDtor() {
  if (headimg_ != &::google::protobuf::internal::kEmptyString) {
    delete headimg_;
  }
  if (this != default_instance_) {
  }
}

void Msg_AccountMsg_C2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_AccountMsg_C2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_AccountMsg_C2S_descriptor_;
}

const Msg_AccountMsg_C2S& Msg_AccountMsg_C2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_AccountMsg_C2S* Msg_AccountMsg_C2S::default_instance_ = NULL;

Msg_AccountMsg_C2S* Msg_AccountMsg_C2S::New() const {
  return new Msg_AccountMsg_C2S;
}

void Msg_AccountMsg_C2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    requestid_ = 0u;
    get_ = false;
    if (has_headimg()) {
      if (headimg_ != &::google::protobuf::internal::kEmptyString) {
        headimg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_AccountMsg_C2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 requestid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get;
        break;
      }

      // required bool get = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_)));
          set_has_get();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_headImg;
        break;
      }

      // optional string headImg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headImg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headimg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headimg().data(), this->headimg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_AccountMsg_C2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 requestid = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->requestid(), output);
  }

  // required bool get = 2;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->get(), output);
  }

  // optional string headImg = 3;
  if (has_headimg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headimg().data(), this->headimg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->headimg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_AccountMsg_C2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 requestid = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->requestid(), target);
  }

  // required bool get = 2;
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->get(), target);
  }

  // optional string headImg = 3;
  if (has_headimg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headimg().data(), this->headimg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->headimg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_AccountMsg_C2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 requestid = 1;
    if (has_requestid()) {
      total_size += 1 + 4;
    }

    // required bool get = 2;
    if (has_get()) {
      total_size += 1 + 1;
    }

    // optional string headImg = 3;
    if (has_headimg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headimg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_AccountMsg_C2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_AccountMsg_C2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_AccountMsg_C2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_AccountMsg_C2S::MergeFrom(const Msg_AccountMsg_C2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_get()) {
      set_get(from.get());
    }
    if (from.has_headimg()) {
      set_headimg(from.headimg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_AccountMsg_C2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_AccountMsg_C2S::CopyFrom(const Msg_AccountMsg_C2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_AccountMsg_C2S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Msg_AccountMsg_C2S::Swap(Msg_AccountMsg_C2S* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(get_, other->get_);
    std::swap(headimg_, other->headimg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_AccountMsg_C2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_AccountMsg_C2S_descriptor_;
  metadata.reflection = Msg_AccountMsg_C2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_AccountMsg_S2C::kAccountFieldNumber;
#endif  // !_MSC_VER

Msg_AccountMsg_S2C::Msg_AccountMsg_S2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_AccountMsg_S2C::InitAsDefaultInstance() {
  account_ = const_cast< ::protoaccount*>(&::protoaccount::default_instance());
}

Msg_AccountMsg_S2C::Msg_AccountMsg_S2C(const Msg_AccountMsg_S2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_AccountMsg_S2C::SharedCtor() {
  _cached_size_ = 0;
  account_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_AccountMsg_S2C::~Msg_AccountMsg_S2C() {
  SharedDtor();
}

void Msg_AccountMsg_S2C::SharedDtor() {
  if (this != default_instance_) {
    delete account_;
  }
}

void Msg_AccountMsg_S2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_AccountMsg_S2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_AccountMsg_S2C_descriptor_;
}

const Msg_AccountMsg_S2C& Msg_AccountMsg_S2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

Msg_AccountMsg_S2C* Msg_AccountMsg_S2C::default_instance_ = NULL;

Msg_AccountMsg_S2C* Msg_AccountMsg_S2C::New() const {
  return new Msg_AccountMsg_S2C;
}

void Msg_AccountMsg_S2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != NULL) account_->::protoaccount::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_AccountMsg_S2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protoaccount account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_AccountMsg_S2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protoaccount account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_AccountMsg_S2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protoaccount account = 1;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_AccountMsg_S2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protoaccount account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_AccountMsg_S2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_AccountMsg_S2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_AccountMsg_S2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_AccountMsg_S2C::MergeFrom(const Msg_AccountMsg_S2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      mutable_account()->::protoaccount::MergeFrom(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_AccountMsg_S2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_AccountMsg_S2C::CopyFrom(const Msg_AccountMsg_S2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_AccountMsg_S2C::IsInitialized() const {

  return true;
}

void Msg_AccountMsg_S2C::Swap(Msg_AccountMsg_S2C* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_AccountMsg_S2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_AccountMsg_S2C_descriptor_;
  metadata.reflection = Msg_AccountMsg_S2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int protoaccount::kNameFieldNumber;
const int protoaccount::kScoreFieldNumber;
const int protoaccount::kBattleNumsFieldNumber;
const int protoaccount::kStandardBattlesFieldNumber;
const int protoaccount::kRankBattlesFieldNumber;
const int protoaccount::kBattleWinsFieldNumber;
const int protoaccount::kStandardWinsFieldNumber;
const int protoaccount::kRankWinsFieldNumber;
const int protoaccount::kTitleFieldNumber;
const int protoaccount::kHeadImgFieldNumber;
#endif  // !_MSC_VER

protoaccount::protoaccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void protoaccount::InitAsDefaultInstance() {
}

protoaccount::protoaccount(const protoaccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void protoaccount::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0u;
  battlenums_ = 0u;
  standardbattles_ = 0u;
  rankbattles_ = 0u;
  battlewins_ = 0u;
  standardwins_ = 0u;
  rankwins_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headimg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

protoaccount::~protoaccount() {
  SharedDtor();
}

void protoaccount::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (headimg_ != &::google::protobuf::internal::kEmptyString) {
    delete headimg_;
  }
  if (this != default_instance_) {
  }
}

void protoaccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* protoaccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return protoaccount_descriptor_;
}

const protoaccount& protoaccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

protoaccount* protoaccount::default_instance_ = NULL;

protoaccount* protoaccount::New() const {
  return new protoaccount;
}

void protoaccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    score_ = 0u;
    battlenums_ = 0u;
    standardbattles_ = 0u;
    rankbattles_ = 0u;
    battlewins_ = 0u;
    standardwins_ = 0u;
    rankwins_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_headimg()) {
      if (headimg_ != &::google::protobuf::internal::kEmptyString) {
        headimg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool protoaccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Score;
        break;
      }

      // optional fixed32 Score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_BattleNums;
        break;
      }

      // optional fixed32 BattleNums = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BattleNums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &battlenums_)));
          set_has_battlenums();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_StandardBattles;
        break;
      }

      // optional fixed32 StandardBattles = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_StandardBattles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &standardbattles_)));
          set_has_standardbattles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_RankBattles;
        break;
      }

      // optional fixed32 RankBattles = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RankBattles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rankbattles_)));
          set_has_rankbattles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_BattleWins;
        break;
      }

      // optional fixed32 BattleWins = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BattleWins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &battlewins_)));
          set_has_battlewins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_StandardWins;
        break;
      }

      // optional fixed32 StandardWins = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_StandardWins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &standardwins_)));
          set_has_standardwins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_RankWins;
        break;
      }

      // optional fixed32 RankWins = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_RankWins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rankwins_)));
          set_has_rankwins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_title;
        break;
      }

      // optional string title = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_HeadImg;
        break;
      }

      // optional string HeadImg = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HeadImg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headimg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headimg().data(), this->headimg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void protoaccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional fixed32 Score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->score(), output);
  }

  // optional fixed32 BattleNums = 3;
  if (has_battlenums()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->battlenums(), output);
  }

  // optional fixed32 StandardBattles = 4;
  if (has_standardbattles()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->standardbattles(), output);
  }

  // optional fixed32 RankBattles = 5;
  if (has_rankbattles()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->rankbattles(), output);
  }

  // optional fixed32 BattleWins = 6;
  if (has_battlewins()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->battlewins(), output);
  }

  // optional fixed32 StandardWins = 7;
  if (has_standardwins()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->standardwins(), output);
  }

  // optional fixed32 RankWins = 8;
  if (has_rankwins()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->rankwins(), output);
  }

  // optional string title = 9;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->title(), output);
  }

  // optional string HeadImg = 10;
  if (has_headimg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headimg().data(), this->headimg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->headimg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* protoaccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed32 Score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->score(), target);
  }

  // optional fixed32 BattleNums = 3;
  if (has_battlenums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->battlenums(), target);
  }

  // optional fixed32 StandardBattles = 4;
  if (has_standardbattles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->standardbattles(), target);
  }

  // optional fixed32 RankBattles = 5;
  if (has_rankbattles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->rankbattles(), target);
  }

  // optional fixed32 BattleWins = 6;
  if (has_battlewins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->battlewins(), target);
  }

  // optional fixed32 StandardWins = 7;
  if (has_standardwins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->standardwins(), target);
  }

  // optional fixed32 RankWins = 8;
  if (has_rankwins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->rankwins(), target);
  }

  // optional string title = 9;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->title(), target);
  }

  // optional string HeadImg = 10;
  if (has_headimg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headimg().data(), this->headimg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->headimg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int protoaccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed32 Score = 2;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // optional fixed32 BattleNums = 3;
    if (has_battlenums()) {
      total_size += 1 + 4;
    }

    // optional fixed32 StandardBattles = 4;
    if (has_standardbattles()) {
      total_size += 1 + 4;
    }

    // optional fixed32 RankBattles = 5;
    if (has_rankbattles()) {
      total_size += 1 + 4;
    }

    // optional fixed32 BattleWins = 6;
    if (has_battlewins()) {
      total_size += 1 + 4;
    }

    // optional fixed32 StandardWins = 7;
    if (has_standardwins()) {
      total_size += 1 + 4;
    }

    // optional fixed32 RankWins = 8;
    if (has_rankwins()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string title = 9;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string HeadImg = 10;
    if (has_headimg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headimg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void protoaccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const protoaccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const protoaccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void protoaccount::MergeFrom(const protoaccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_battlenums()) {
      set_battlenums(from.battlenums());
    }
    if (from.has_standardbattles()) {
      set_standardbattles(from.standardbattles());
    }
    if (from.has_rankbattles()) {
      set_rankbattles(from.rankbattles());
    }
    if (from.has_battlewins()) {
      set_battlewins(from.battlewins());
    }
    if (from.has_standardwins()) {
      set_standardwins(from.standardwins());
    }
    if (from.has_rankwins()) {
      set_rankwins(from.rankwins());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_headimg()) {
      set_headimg(from.headimg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void protoaccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void protoaccount::CopyFrom(const protoaccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool protoaccount::IsInitialized() const {

  return true;
}

void protoaccount::Swap(protoaccount* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(battlenums_, other->battlenums_);
    std::swap(standardbattles_, other->standardbattles_);
    std::swap(rankbattles_, other->rankbattles_);
    std::swap(battlewins_, other->battlewins_);
    std::swap(standardwins_, other->standardwins_);
    std::swap(rankwins_, other->rankwins_);
    std::swap(title_, other->title_);
    std::swap(headimg_, other->headimg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata protoaccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = protoaccount_descriptor_;
  metadata.reflection = protoaccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int protocard::kCardIdFieldNumber;
const int protocard::kCardAttributeFieldNumber;
const int protocard::kCardTypeFieldNumber;
const int protocard::kCardValueFieldNumber;
const int protocard::kCardImageFieldNumber;
const int protocard::kImgIDFieldNumber;
#endif  // !_MSC_VER

protocard::protocard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void protocard::InitAsDefaultInstance() {
}

protocard::protocard(const protocard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void protocard::SharedCtor() {
  _cached_size_ = 0;
  card_id_ = 0u;
  card_attribute_ = 0;
  card_type_ = 0u;
  card_value_ = 0u;
  card_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

protocard::~protocard() {
  SharedDtor();
}

void protocard::SharedDtor() {
  if (card_image_ != &::google::protobuf::internal::kEmptyString) {
    delete card_image_;
  }
  if (this != default_instance_) {
  }
}

void protocard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* protocard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return protocard_descriptor_;
}

const protocard& protocard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

protocard* protocard::default_instance_ = NULL;

protocard* protocard::New() const {
  return new protocard;
}

void protocard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_id_ = 0u;
    card_attribute_ = 0;
    card_type_ = 0u;
    card_value_ = 0u;
    if (has_card_image()) {
      if (card_image_ != &::google::protobuf::internal::kEmptyString) {
        card_image_->clear();
      }
    }
    imgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool protocard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 card_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &card_id_)));
          set_has_card_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_attribute;
        break;
      }

      // required .CardAttribute card_attribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_attribute:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CardAttribute_IsValid(value)) {
            set_card_attribute(static_cast< ::CardAttribute >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_card_type;
        break;
      }

      // required fixed32 card_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_card_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &card_type_)));
          set_has_card_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_card_value;
        break;
      }

      // required fixed32 card_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_card_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &card_value_)));
          set_has_card_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_card_image;
        break;
      }

      // optional string card_image = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_image().data(), this->card_image().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_imgID;
        break;
      }

      // optional fixed32 imgID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_imgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &imgid_)));
          set_has_imgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void protocard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 card_id = 1;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->card_id(), output);
  }

  // required .CardAttribute card_attribute = 2;
  if (has_card_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->card_attribute(), output);
  }

  // required fixed32 card_type = 3;
  if (has_card_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->card_type(), output);
  }

  // required fixed32 card_value = 4;
  if (has_card_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->card_value(), output);
  }

  // optional string card_image = 5;
  if (has_card_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_image().data(), this->card_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->card_image(), output);
  }

  // optional fixed32 imgID = 6;
  if (has_imgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->imgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* protocard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 card_id = 1;
  if (has_card_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->card_id(), target);
  }

  // required .CardAttribute card_attribute = 2;
  if (has_card_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->card_attribute(), target);
  }

  // required fixed32 card_type = 3;
  if (has_card_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->card_type(), target);
  }

  // required fixed32 card_value = 4;
  if (has_card_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->card_value(), target);
  }

  // optional string card_image = 5;
  if (has_card_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_image().data(), this->card_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->card_image(), target);
  }

  // optional fixed32 imgID = 6;
  if (has_imgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->imgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int protocard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 card_id = 1;
    if (has_card_id()) {
      total_size += 1 + 4;
    }

    // required .CardAttribute card_attribute = 2;
    if (has_card_attribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->card_attribute());
    }

    // required fixed32 card_type = 3;
    if (has_card_type()) {
      total_size += 1 + 4;
    }

    // required fixed32 card_value = 4;
    if (has_card_value()) {
      total_size += 1 + 4;
    }

    // optional string card_image = 5;
    if (has_card_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_image());
    }

    // optional fixed32 imgID = 6;
    if (has_imgid()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void protocard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const protocard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const protocard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void protocard::MergeFrom(const protocard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card_id()) {
      set_card_id(from.card_id());
    }
    if (from.has_card_attribute()) {
      set_card_attribute(from.card_attribute());
    }
    if (from.has_card_type()) {
      set_card_type(from.card_type());
    }
    if (from.has_card_value()) {
      set_card_value(from.card_value());
    }
    if (from.has_card_image()) {
      set_card_image(from.card_image());
    }
    if (from.has_imgid()) {
      set_imgid(from.imgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void protocard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void protocard::CopyFrom(const protocard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool protocard::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void protocard::Swap(protocard* other) {
  if (other != this) {
    std::swap(card_id_, other->card_id_);
    std::swap(card_attribute_, other->card_attribute_);
    std::swap(card_type_, other->card_type_);
    std::swap(card_value_, other->card_value_);
    std::swap(card_image_, other->card_image_);
    std::swap(imgid_, other->imgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata protocard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = protocard_descriptor_;
  metadata.reflection = protocard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int protoRoom::kRoomIdFieldNumber;
const int protoRoom::kRoomNameFieldNumber;
const int protoRoom::kRoomUsersFieldNumber;
const int protoRoom::kRoompatternFieldNumber;
const int protoRoom::kMapFieldNumber;
#endif  // !_MSC_VER

protoRoom::protoRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void protoRoom::InitAsDefaultInstance() {
}

protoRoom::protoRoom(const protoRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void protoRoom::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0u;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  room_users_ = 0u;
  roompattern_ = 0;
  map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

protoRoom::~protoRoom() {
  SharedDtor();
}

void protoRoom::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (map_ != &::google::protobuf::internal::kEmptyString) {
    delete map_;
  }
  if (this != default_instance_) {
  }
}

void protoRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* protoRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return protoRoom_descriptor_;
}

const protoRoom& protoRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_2eproto();
  return *default_instance_;
}

protoRoom* protoRoom::default_instance_ = NULL;

protoRoom* protoRoom::New() const {
  return new protoRoom;
}

void protoRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0u;
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::kEmptyString) {
        room_name_->clear();
      }
    }
    room_users_ = 0u;
    roompattern_ = 0;
    if (has_map()) {
      if (map_ != &::google::protobuf::internal::kEmptyString) {
        map_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool protoRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_name;
        break;
      }

      // required string room_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_room_users;
        break;
      }

      // required fixed32 room_users = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_room_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &room_users_)));
          set_has_room_users();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roompattern;
        break;
      }

      // required .GamePattern roompattern = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roompattern:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GamePattern_IsValid(value)) {
            set_roompattern(static_cast< ::GamePattern >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_map;
        break;
      }

      // optional string map = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->map().data(), this->map().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void protoRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->room_id(), output);
  }

  // required string room_name = 2;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->room_name(), output);
  }

  // required fixed32 room_users = 3;
  if (has_room_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->room_users(), output);
  }

  // required .GamePattern roompattern = 4;
  if (has_roompattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->roompattern(), output);
  }

  // optional string map = 5;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* protoRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->room_id(), target);
  }

  // required string room_name = 2;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_name(), target);
  }

  // required fixed32 room_users = 3;
  if (has_room_users()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->room_users(), target);
  }

  // required .GamePattern roompattern = 4;
  if (has_roompattern()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->roompattern(), target);
  }

  // optional string map = 5;
  if (has_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int protoRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 + 4;
    }

    // required string room_name = 2;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

    // required fixed32 room_users = 3;
    if (has_room_users()) {
      total_size += 1 + 4;
    }

    // required .GamePattern roompattern = 4;
    if (has_roompattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roompattern());
    }

    // optional string map = 5;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void protoRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const protoRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const protoRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void protoRoom::MergeFrom(const protoRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
    if (from.has_room_users()) {
      set_room_users(from.room_users());
    }
    if (from.has_roompattern()) {
      set_roompattern(from.roompattern());
    }
    if (from.has_map()) {
      set_map(from.map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void protoRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void protoRoom::CopyFrom(const protoRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool protoRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void protoRoom::Swap(protoRoom* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(room_name_, other->room_name_);
    std::swap(room_users_, other->room_users_);
    std::swap(roompattern_, other->roompattern_);
    std::swap(map_, other->map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata protoRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = protoRoom_descriptor_;
  metadata.reflection = protoRoom_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
