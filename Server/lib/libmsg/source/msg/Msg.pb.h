// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg.proto

#ifndef PROTOBUF_Msg_2eproto__INCLUDED
#define PROTOBUF_Msg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Msg_2eproto();
void protobuf_AssignDesc_Msg_2eproto();
void protobuf_ShutdownFile_Msg_2eproto();

class Msg_Login_C2S;
class Msg_Login_S2C;

enum GamePattern {
  Standard = 0,
  Rank = 1
};
bool GamePattern_IsValid(int value);
const GamePattern GamePattern_MIN = Standard;
const GamePattern GamePattern_MAX = Rank;
const int GamePattern_ARRAYSIZE = GamePattern_MAX + 1;

const ::google::protobuf::EnumDescriptor* GamePattern_descriptor();
inline const ::std::string& GamePattern_Name(GamePattern value) {
  return ::google::protobuf::internal::NameOfEnum(
    GamePattern_descriptor(), value);
}
inline bool GamePattern_Parse(
    const ::std::string& name, GamePattern* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GamePattern>(
    GamePattern_descriptor(), name, value);
}
enum CardAttribute {
  none = 0,
  fire = 1,
  water = 2,
  wood = 3,
  light = 4,
  dark = 5
};
bool CardAttribute_IsValid(int value);
const CardAttribute CardAttribute_MIN = none;
const CardAttribute CardAttribute_MAX = dark;
const int CardAttribute_ARRAYSIZE = CardAttribute_MAX + 1;

const ::google::protobuf::EnumDescriptor* CardAttribute_descriptor();
inline const ::std::string& CardAttribute_Name(CardAttribute value) {
  return ::google::protobuf::internal::NameOfEnum(
    CardAttribute_descriptor(), value);
}
inline bool CardAttribute_Parse(
    const ::std::string& name, CardAttribute* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CardAttribute>(
    CardAttribute_descriptor(), name, value);
}
enum MsgType {
  LOGIN_C2S = 0,
  LOGIN_S2C = 1
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = LOGIN_C2S;
const MsgType MsgType_MAX = LOGIN_S2C;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class Msg_Login_C2S : public ::google::protobuf::Message {
 public:
  Msg_Login_C2S();
  virtual ~Msg_Login_C2S();

  Msg_Login_C2S(const Msg_Login_C2S& from);

  inline Msg_Login_C2S& operator=(const Msg_Login_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_Login_C2S& default_instance();

  void Swap(Msg_Login_C2S* other);

  // implements Message ----------------------------------------------

  Msg_Login_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_Login_C2S& from);
  void MergeFrom(const Msg_Login_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .MsgType MsgID = 1 [default = LOGIN_C2S];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::MsgType msgid() const;
  inline void set_msgid(::MsgType value);

  // required fixed32 conMethod = 2;
  inline bool has_conmethod() const;
  inline void clear_conmethod();
  static const int kConMethodFieldNumber = 2;
  inline ::google::protobuf::uint32 conmethod() const;
  inline void set_conmethod(::google::protobuf::uint32 value);

  // required string szName = 3;
  inline bool has_szname() const;
  inline void clear_szname();
  static const int kSzNameFieldNumber = 3;
  inline const ::std::string& szname() const;
  inline void set_szname(const ::std::string& value);
  inline void set_szname(const char* value);
  inline void set_szname(const char* value, size_t size);
  inline ::std::string* mutable_szname();
  inline ::std::string* release_szname();
  inline void set_allocated_szname(::std::string* szname);

  // required string szPassWord = 4;
  inline bool has_szpassword() const;
  inline void clear_szpassword();
  static const int kSzPassWordFieldNumber = 4;
  inline const ::std::string& szpassword() const;
  inline void set_szpassword(const ::std::string& value);
  inline void set_szpassword(const char* value);
  inline void set_szpassword(const char* value, size_t size);
  inline ::std::string* mutable_szpassword();
  inline ::std::string* release_szpassword();
  inline void set_allocated_szpassword(::std::string* szpassword);

  // @@protoc_insertion_point(class_scope:Msg_Login_C2S)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_conmethod();
  inline void clear_has_conmethod();
  inline void set_has_szname();
  inline void clear_has_szname();
  inline void set_has_szpassword();
  inline void clear_has_szpassword();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int msgid_;
  ::google::protobuf::uint32 conmethod_;
  ::std::string* szname_;
  ::std::string* szpassword_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Msg_2eproto();
  friend void protobuf_AssignDesc_Msg_2eproto();
  friend void protobuf_ShutdownFile_Msg_2eproto();

  void InitAsDefaultInstance();
  static Msg_Login_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_Login_S2C : public ::google::protobuf::Message {
 public:
  Msg_Login_S2C();
  virtual ~Msg_Login_S2C();

  Msg_Login_S2C(const Msg_Login_S2C& from);

  inline Msg_Login_S2C& operator=(const Msg_Login_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_Login_S2C& default_instance();

  void Swap(Msg_Login_S2C* other);

  // implements Message ----------------------------------------------

  Msg_Login_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_Login_S2C& from);
  void MergeFrom(const Msg_Login_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .MsgType MsgID = 1 [default = LOGIN_C2S];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIDFieldNumber = 1;
  inline ::MsgType msgid() const;
  inline void set_msgid(::MsgType value);

  // required fixed32 clientId = 2;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIdFieldNumber = 2;
  inline ::google::protobuf::uint32 clientid() const;
  inline void set_clientid(::google::protobuf::uint32 value);

  // required bool conSuccess = 3;
  inline bool has_consuccess() const;
  inline void clear_consuccess();
  static const int kConSuccessFieldNumber = 3;
  inline bool consuccess() const;
  inline void set_consuccess(bool value);

  // @@protoc_insertion_point(class_scope:Msg_Login_S2C)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_consuccess();
  inline void clear_has_consuccess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int msgid_;
  ::google::protobuf::uint32 clientid_;
  bool consuccess_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Msg_2eproto();
  friend void protobuf_AssignDesc_Msg_2eproto();
  friend void protobuf_ShutdownFile_Msg_2eproto();

  void InitAsDefaultInstance();
  static Msg_Login_S2C* default_instance_;
};
// ===================================================================


// ===================================================================

// Msg_Login_C2S

// required .MsgType MsgID = 1 [default = LOGIN_C2S];
inline bool Msg_Login_C2S::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_Login_C2S::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_Login_C2S::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_Login_C2S::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::MsgType Msg_Login_C2S::msgid() const {
  return static_cast< ::MsgType >(msgid_);
}
inline void Msg_Login_C2S::set_msgid(::MsgType value) {
  assert(::MsgType_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required fixed32 conMethod = 2;
inline bool Msg_Login_C2S::has_conmethod() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_Login_C2S::set_has_conmethod() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_Login_C2S::clear_has_conmethod() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_Login_C2S::clear_conmethod() {
  conmethod_ = 0u;
  clear_has_conmethod();
}
inline ::google::protobuf::uint32 Msg_Login_C2S::conmethod() const {
  return conmethod_;
}
inline void Msg_Login_C2S::set_conmethod(::google::protobuf::uint32 value) {
  set_has_conmethod();
  conmethod_ = value;
}

// required string szName = 3;
inline bool Msg_Login_C2S::has_szname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_Login_C2S::set_has_szname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_Login_C2S::clear_has_szname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_Login_C2S::clear_szname() {
  if (szname_ != &::google::protobuf::internal::kEmptyString) {
    szname_->clear();
  }
  clear_has_szname();
}
inline const ::std::string& Msg_Login_C2S::szname() const {
  return *szname_;
}
inline void Msg_Login_C2S::set_szname(const ::std::string& value) {
  set_has_szname();
  if (szname_ == &::google::protobuf::internal::kEmptyString) {
    szname_ = new ::std::string;
  }
  szname_->assign(value);
}
inline void Msg_Login_C2S::set_szname(const char* value) {
  set_has_szname();
  if (szname_ == &::google::protobuf::internal::kEmptyString) {
    szname_ = new ::std::string;
  }
  szname_->assign(value);
}
inline void Msg_Login_C2S::set_szname(const char* value, size_t size) {
  set_has_szname();
  if (szname_ == &::google::protobuf::internal::kEmptyString) {
    szname_ = new ::std::string;
  }
  szname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_Login_C2S::mutable_szname() {
  set_has_szname();
  if (szname_ == &::google::protobuf::internal::kEmptyString) {
    szname_ = new ::std::string;
  }
  return szname_;
}
inline ::std::string* Msg_Login_C2S::release_szname() {
  clear_has_szname();
  if (szname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szname_;
    szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_Login_C2S::set_allocated_szname(::std::string* szname) {
  if (szname_ != &::google::protobuf::internal::kEmptyString) {
    delete szname_;
  }
  if (szname) {
    set_has_szname();
    szname_ = szname;
  } else {
    clear_has_szname();
    szname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string szPassWord = 4;
inline bool Msg_Login_C2S::has_szpassword() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Msg_Login_C2S::set_has_szpassword() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Msg_Login_C2S::clear_has_szpassword() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Msg_Login_C2S::clear_szpassword() {
  if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
    szpassword_->clear();
  }
  clear_has_szpassword();
}
inline const ::std::string& Msg_Login_C2S::szpassword() const {
  return *szpassword_;
}
inline void Msg_Login_C2S::set_szpassword(const ::std::string& value) {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  szpassword_->assign(value);
}
inline void Msg_Login_C2S::set_szpassword(const char* value) {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  szpassword_->assign(value);
}
inline void Msg_Login_C2S::set_szpassword(const char* value, size_t size) {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  szpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_Login_C2S::mutable_szpassword() {
  set_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    szpassword_ = new ::std::string;
  }
  return szpassword_;
}
inline ::std::string* Msg_Login_C2S::release_szpassword() {
  clear_has_szpassword();
  if (szpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szpassword_;
    szpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_Login_C2S::set_allocated_szpassword(::std::string* szpassword) {
  if (szpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete szpassword_;
  }
  if (szpassword) {
    set_has_szpassword();
    szpassword_ = szpassword;
  } else {
    clear_has_szpassword();
    szpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Msg_Login_S2C

// required .MsgType MsgID = 1 [default = LOGIN_C2S];
inline bool Msg_Login_S2C::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_Login_S2C::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_Login_S2C::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_Login_S2C::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::MsgType Msg_Login_S2C::msgid() const {
  return static_cast< ::MsgType >(msgid_);
}
inline void Msg_Login_S2C::set_msgid(::MsgType value) {
  assert(::MsgType_IsValid(value));
  set_has_msgid();
  msgid_ = value;
}

// required fixed32 clientId = 2;
inline bool Msg_Login_S2C::has_clientid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_Login_S2C::set_has_clientid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_Login_S2C::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_Login_S2C::clear_clientid() {
  clientid_ = 0u;
  clear_has_clientid();
}
inline ::google::protobuf::uint32 Msg_Login_S2C::clientid() const {
  return clientid_;
}
inline void Msg_Login_S2C::set_clientid(::google::protobuf::uint32 value) {
  set_has_clientid();
  clientid_ = value;
}

// required bool conSuccess = 3;
inline bool Msg_Login_S2C::has_consuccess() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_Login_S2C::set_has_consuccess() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_Login_S2C::clear_has_consuccess() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_Login_S2C::clear_consuccess() {
  consuccess_ = false;
  clear_has_consuccess();
}
inline bool Msg_Login_S2C::consuccess() const {
  return consuccess_;
}
inline void Msg_Login_S2C::set_consuccess(bool value) {
  set_has_consuccess();
  consuccess_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GamePattern>() {
  return ::GamePattern_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CardAttribute>() {
  return ::CardAttribute_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgType>() {
  return ::MsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Msg_2eproto__INCLUDED
