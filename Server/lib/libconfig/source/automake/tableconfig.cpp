//THIS FILE IS GENERATED BY tabtool, DO NOT EDIT IT!
//GENERATE TIME [2021/4/16 23:51:10]
#include "tableconfig.h"

bool LoadTableConfig()
{
    stConfigScope scope;
    if(false == Singleton<cfgChessTypeTable>::Instance()->Load())
    {
        ErrorLog("加载配置%s出错",Singleton<cfgChessTypeTable>::Instance()->GetTableFile().c_str() );
        return false;
    }
    if(false == Singleton<cfgDatabaseCfgTable>::Instance()->Load())
    {
        ErrorLog("加载配置%s出错",Singleton<cfgDatabaseCfgTable>::Instance()->GetTableFile().c_str() );
        return false;
    }
    if(false == Singleton<cfgGlobalCfgTable>::Instance()->Load())
    {
        ErrorLog("加载配置%s出错",Singleton<cfgGlobalCfgTable>::Instance()->GetTableFile().c_str() );
        return false;
    }
    return true;
}

bool cfgChessTypeTable::Load()
{
	ReadTableFile reader;
	reader.Initialize();

	if (!reader.Init(GetTableFile().c_str()))
		return false;

	DataReader dr;
	int iRows = reader.GetRowCount();
	int iCols = reader.GetColCount();

	for (int i = 1; i < iRows; ++i)
	{
		tbsChessTypeItem item;
		item.id = atoi(reader.GetValue(i, "id"));
		item.color = atoi(reader.GetValue(i, "color"));
		item.type = atoi(reader.GetValue(i, "type"));
		item.alias = (reader.GetValue(i, "alias"));
		item.name = (reader.GetValue(i, "name"));
		item.posx = atoi(reader.GetValue(i, "posx"));
		item.posy = atoi(reader.GetValue(i, "posy"));
		item.ps = (reader.GetValue(i, "ps"));
		m_Items[item.id] = item;
	}

	return true;
}
bool cfgDatabaseCfgTable::Load()
{
	ReadTableFile reader;
	reader.Initialize();

	if (!reader.Init(GetTableFile().c_str()))
		return false;

	DataReader dr;
	int iRows = reader.GetRowCount();
	int iCols = reader.GetColCount();

	for (int i = 1; i < iRows; ++i)
	{
		tbsDatabaseCfgItem item;
		item.id = atoi(reader.GetValue(i, "id"));
		item.host = (reader.GetValue(i, "host"));
		item.user = (reader.GetValue(i, "user"));
		item.password = (reader.GetValue(i, "password"));
		item.database = (reader.GetValue(i, "database"));
		item.port = atoi(reader.GetValue(i, "port"));
		item.unix_socket = atoi(reader.GetValue(i, "unix_socket"));
		item.clientflag = atoi(reader.GetValue(i, "clientflag"));
		m_Items[item.id] = item;
	}

	return true;
}
bool cfgGlobalCfgTable::Load()
{
	ReadTableFile reader;
	reader.Initialize();

	if (!reader.Init(GetTableFile().c_str()))
		return false;

	DataReader dr;
	int iRows = reader.GetRowCount();
	int iCols = reader.GetColCount();

	for (int i = 1; i < iRows; ++i)
	{
		tbsGlobalCfgItem item;
		item.id = atoi(reader.GetValue(i, "id"));
		item.ServerIP = (reader.GetValue(i, "ServerIP"));
		item.ServerPort = atoi(reader.GetValue(i, "ServerPort"));
		m_Items[item.id] = item;
	}

	return true;
}
